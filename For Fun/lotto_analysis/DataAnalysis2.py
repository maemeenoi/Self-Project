import re
from collections import Counter

data = """
Frequency    Number Pairs
45    15,22
41    23,30
40    10,28 19,23 19,35
39    10,12 10,24
38    5,28 6,25 17,19
37    1,22 12,24 13,31 14,15 17,18 17,27 19,28 19,36 23,25 23,40
36    1,23 1,31 1,32 4,24 5,21 7,16 10,15 12,35 13,19 15,19 22,36 25,27 28,35 32,38
35    1,12 1,26 2,3 2,30 4,35 10,21 10,25 12,17 12,25 13,40 14,17 15,38 18,21 19,24 19,40 26,39
34    1,5 2,9 2,17 2,23 7,38 10,18 12,21 13,23 13,27 15,29 15,31 17,28 19,21 22,23 22,24 22,40 24,28 24,35 29,32 35,38
33    1,20 4,27 5,22 5,31 5,33 5,40 6,15 6,23 10,11 10,17 12,18 12,28 12,34 12,36 13,33 15,27 16,39 16,25 16,40 17,35 19,20 19,39 22,25 22,29 22,32 25,27 27,28 35,32 38
32    1,21 1,83 1,14 4,05 2,46 4,07 1,77 3,18 2,110 3,311 3,112 2,213 3,613 3,814 2,315 3,216 2,416 3,117 2,317 2,517 2,919 2,220 3,124 3,726 3,729 3,330 3,230 3,731 3,836 3,739 40
31    2,253 3,03 4,05 3,96 3,510 2,210 3,010 3,512 1,913 2,614 1,815 1,715 2,415 4,016 2,316 2,816 2,919 2,519 3,220 2,420 3,321 2,321 3,524 3,427 2,829 3,532 36
30    1,161 1,91 2,11 3,43 1,73 1,94 5,4 6,4 12,4 15,6 34,7 19,7 40,8 10,9 17,10 19,10 40,11 16,11 36,12 16,12 23,12 31,12 38,12 39,15 33,16 20,16 33,16 39,17 20,17 33,17 38,18 37,18 40,19 26,21 30,21 40,22 31,22 34,23 27,23 31,25 28,26 28,29 40,30,31
29    1,111 29,1 36,2 4,2 13,2 15,2 26,3 38,4 20,4 32,5 30,6 11,6 26,6 28,6 29,7 27,8 17,9 12,9 19,10 38,11 19,13 34,14 36,15 18,15 21,15 23,15 30,19 30,19 31,20 30,21 26,21 37,22 26,22 30,22 35,23 26,24 36,25 31,25 34,25 38,25 40,26 32,29 37,29 38,29 39,30 40,31 33,31 37,32 37,33 38
28    1,71 15,1 38,3 18,3 22,3 26,3 29,4 17,5 11,5 12,5 18,6 17,7 34,8 18,8 23,8 28,9 10,9 22,9 23,9 25,9 35,10 14,11 17,12 32,13 16,13 18,13 22,13 25,13 28,13 30,14 38,15 35,16 34,16 38,17 22,17 34,18 22,18 34,18 35,19 29,20 39,21 34,22 27,22 28,23 24,23 32,23 35,24 25,25 35,26 34,26 40,27 36,28 30,28 34,29 30,31 32,31 40,33 37,33 40
27    1,14 2,24 2,28 2,32 3,23 2,53 3,13 3,74 2,54 3,35 1,35 1,96 3,07 2,57 3,28 2,08 3,59 15,10 20,10 23,10 26,10 29,11 12,11 15,12 26,13 15,13 17,13 21,13 32,14 31,15 20,15 25,16 18,16 19,16 32,17 26,17 31,17 39,18 32,20 22,21 22,23 29,23 34,24 30,24 32,25 26,27 37,28 37,32 40,34 40,35 36,38 40
26    1,3 1,9 1,17 1,35 1,37 2,5 2,10 2,27 2,35 2,36 4,3 5,3 9,3 15,3 35,5 15,5 26,6 10,6 12,6 18,7 29,7 33,7 37,8 31,9 24,10 31,11 26,11 33,11 38,12 13,12 15,12 37,13 35,14 35,14 37,17 30,17 32,18 25,19 34,19 37,20 28,23 36,25 30,26 27,26 30,26 31,27 38,30 34,30 38,30 39,31 39,33 35,34 37,36 39,36 40
25    1,28 1,30 2,7 1,12 1,92 2,22 2,92 3,33 6,3 14,3 20,4 21,4 28,5 20,5 34,5 38,6 7,6 19,7 12,7 23,7 26,7 30,7 36,8 15,8 24,8 26,8 33,9 13,9 36,10 13,10 37,11 13,11 29,12 27,13 14,13 29,14 19,14 24,16 30,16 35,16 36,18 20,18 23,18 30,18 33,18 39,20 35,20 38,21 32,21 33,22 39,23 28,23 38,23 39,24 26,24 29,24 38,26 33,27 29,27 32,27 40,28 32,32 33,34 36,35 39
24    1,6 1,8 2,42 1,22 1,62 3,13 7,3 13,4 7,4 8,4 13,4 19,4 37,5 6,5 32,5 36,6 8,6 13,6 21,6 24,7 11,7 22,7 28,8 25,8 36,10 16,10 36,11 23,11 28,11 32,11 34,11 37,12 14,12 29,13 37,14 30,14 34,18 29,19 33,19 38,20 32,20 37,21 24,23 33,23 37,24 40,25 29,25 39,26 35,26 38,28 36,28 38,28 39,28 40,29 31,31 34,34 35,35 40,37 38,37 39
23    1,33 1,40 2,6 2,38 2,40 3,214 10,4 11,4 22,4 29,4 31,5 16,6 22,7 9,7 10,8 11,8 13,9 16,9 18,9 20,9 33,10 34,11 20,11 21,11 30,11 39,12 40,14 16,14 22,15 28,15 34,15 36,17 21,17 37,18 19,18 26,18 28,20 25,20 29,20 34,21 25,21 31,27 33,28 29,29 34,29 36,31 36,33 39,35 37,36 38
22    1,10 2,183 8,3 3,64 1,64 3,44 3,85 7,5 10,5 14,5 37,6 31,6 32,7 14,7 15,7 35,8 12,8 16,8 22,8 27,8 19,8 20,9 33,9 34,9 19,10 28,10 27,10 39,11 40,15 26,16 17,16 37,17 40,19 27,20 23,20 26,20 40,22 33,22 37,24 27,24 39,28 31,30 35,30 36,32 39,33 36,34 39
21    1,39 3,03 2,33 2,43 2,73 2,83 3,94 9,4 23,4 26,4 36,5 29,6 16,6 20,6 36,6 38,6 39,7 8,7 39,8 14,9 21,9 37,11 22,11 24,11 25,13 20,13 39,14 21,14 32,14 33,15 16,15 37,16 21,16 22,17 24,18 24,18 27,18 31,21 27,21 29,21 39,25 36,27 31,27 34,30 33,32 35
20    2,8 2,13 1,63 3,23 3,35 1,76 3,36 3,77 1,37 2,07 24,8 32,9 26,9 30,11 18,12 20,12 30,13 24,14 25,14 29,21 36,21 38,22 38,25 33,25 37,26 36,27 39,37 40
19    1,27 2,45 2,55 2,76 9,7 18,7 21,8 9,8 19,8 29,8 34,8 38,9 14,9 39,10 32,11 14,12 33,14 20,14 26,14 40,16 26,17 36,20 36,21 28,27 35,28 33,34 38
18    2,20 4,18 4,05 8,5 9,8 37,9 40,14 39,16 27,18 36,24 31,24 33,27 30,33 34,38 39
17    1,4 1,31 2,53 3,44 1,45 2,38 3,09 32,14 27,26 29,32 34
16    2,37 2,95 3,59 3,49 38,11 27,11 35,14 28,18 38,20 21
15    3,12 6,27 9,11 9,29 9,31
14    4,39
12    20,27
11    2,34 6,14
""".strip()

# We'll parse this data line by line, skipping the header
lines = data.split("\n")

number_frequency = Counter()

for line in lines:
    if "Frequency" in line and "Number Pairs" in line:
        # This is likely the header line, skip it
        continue
    
    # Each line is structured as: Frequency [some spaces] pairs...
    # We'll split on whitespace first to get the frequency
    # Then re-join the remainder of the line and parse pairs using a regex
    parts = line.strip().split(None, 1)
    if len(parts) < 2:
        continue
    freq_str, pairs_str = parts[0], parts[1]
    freq = int(freq_str)
    
    # Pairs may be separated by spaces, each pair is like "15,22"
    # Let's find all occurrences of pattern like NN,NN where NN are digits
    pair_matches = re.findall(r'(\d+,\d+)', pairs_str)
    
    for pm in pair_matches:
        # pm is something like "15,22"
        nums = pm.split(',')
        # update frequency for each individual number
        for n in nums:
            number_frequency[int(n)] += freq

# Now we have a frequency count for each number across all pairs.
# Let's find the top numbers
most_common_numbers = number_frequency.most_common()

# Sort by frequency (most_common is already sorted by count desc)
# For a lotto prediction, we might pick the top 6 numbers
predicted_main_numbers = [num for num, count in most_common_numbers[:6]]

# If you need a "Powerball" number (1-10), 
# you could filter for those within 1-10 and pick the top:
powerball_candidates = [(num, count) for num, count in number_frequency.items() if 1 <= num <= 10]
powerball_candidates.sort(key=lambda x: x[1], reverse=True)
predicted_powerball = powerball_candidates[0][0] if powerball_candidates else None

print("Predicted Lotto Numbers:", predicted_main_numbers)
print("Predicted Powerball Number:", predicted_powerball)