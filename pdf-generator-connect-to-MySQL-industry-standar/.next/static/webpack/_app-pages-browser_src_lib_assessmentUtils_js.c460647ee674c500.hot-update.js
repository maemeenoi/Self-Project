"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_src_lib_assessmentUtils_js",{

/***/ "(app-pages-browser)/./src/lib/assessmentUtils.js":
/*!************************************!*\
  !*** ./src/lib/assessmentUtils.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   processAssessmentData: () => (/* binding */ processAssessmentData)\n/* harmony export */ });\n// src/lib/assessmentUtils.js\n/**\n * Processes database responses into maturity assessment data\n * @param {Array} responses - Array of response objects from the database\n * @returns {Object} Processed assessment data\n */ function processAssessmentData(responses, industryStandards) {\n    var _responses_find, _responses_find1, _responses_find2, _responses_find3, _responses_find4, _categoryScores_CloudStrategy, _categoryScores_CloudCost, _categoryScores_CloudSecurity, _categoryScores_CloudPeople, _categoryScores_CloudDevOps;\n    // Extract client information\n    const clientInfo = {\n        name: ((_responses_find = responses.find((r)=>r.QuestionID === 1)) === null || _responses_find === void 0 ? void 0 : _responses_find.ResponseText) || \"Unknown\",\n        business: ((_responses_find1 = responses.find((r)=>r.QuestionID === 2)) === null || _responses_find1 === void 0 ? void 0 : _responses_find1.ResponseText) || \"Unknown\",\n        email: ((_responses_find2 = responses.find((r)=>r.QuestionID === 3)) === null || _responses_find2 === void 0 ? void 0 : _responses_find2.ResponseText) || \"Unknown\",\n        size: ((_responses_find3 = responses.find((r)=>r.QuestionID === 4)) === null || _responses_find3 === void 0 ? void 0 : _responses_find3.ResponseText) || \"Unknown\",\n        industry: ((_responses_find4 = responses.find((r)=>r.QuestionID === 5)) === null || _responses_find4 === void 0 ? void 0 : _responses_find4.ResponseText) || \"Unknown\"\n    };\n    // Create a map of Industry Standards for fast lookup\n    const standardMap = {};\n    industryStandards.forEach((standard)=>{\n        if (standard.QuestionID) {\n            standardMap[standard.QuestionID] = standard.StandardText;\n        }\n    });\n    // Group questions by category\n    const categoryMapping = {\n        \"Cloud Strategy\": [\n            6,\n            7,\n            8\n        ],\n        \"Cloud Cost\": [\n            9,\n            10,\n            11\n        ],\n        \"Cloud Security\": [\n            12,\n            13\n        ],\n        \"Cloud People\": [\n            14,\n            19,\n            20\n        ],\n        \"Cloud DevOps\": [\n            15,\n            16,\n            17,\n            18\n        ]\n    };\n    // Calculate scores for each category\n    const categoryScores = {};\n    Object.entries(categoryMapping).forEach((param)=>{\n        let [category, questionIds] = param;\n        const scores = questionIds.map((id)=>{\n            const response = responses.find((r)=>r.QuestionID === id);\n            return (response === null || response === void 0 ? void 0 : response.Score) || 0;\n        }).filter((score)=>score > 0);\n        // Calculate average score if we have valid scores\n        if (scores.length > 0) {\n            categoryScores[category] = {\n                score: parseFloat((scores.reduce((sum, score)=>sum + score, 0) / scores.length).toFixed(1)),\n                responses: scores\n            };\n        }\n    });\n    // Determine maturity levels based on scores\n    const maturityLevels = {\n        \"Cloud Strategy\": determineStrategyMaturityLevel((_categoryScores_CloudStrategy = categoryScores[\"Cloud Strategy\"]) === null || _categoryScores_CloudStrategy === void 0 ? void 0 : _categoryScores_CloudStrategy.score),\n        \"Cloud Cost\": determineCostMaturityLevel((_categoryScores_CloudCost = categoryScores[\"Cloud Cost\"]) === null || _categoryScores_CloudCost === void 0 ? void 0 : _categoryScores_CloudCost.score),\n        \"Cloud Security\": determineSecurityMaturityLevel((_categoryScores_CloudSecurity = categoryScores[\"Cloud Security\"]) === null || _categoryScores_CloudSecurity === void 0 ? void 0 : _categoryScores_CloudSecurity.score),\n        \"Cloud People\": determinePeopleMaturityLevel((_categoryScores_CloudPeople = categoryScores[\"Cloud People\"]) === null || _categoryScores_CloudPeople === void 0 ? void 0 : _categoryScores_CloudPeople.score),\n        \"Cloud DevOps\": determineDevOpsMaturityLevel((_categoryScores_CloudDevOps = categoryScores[\"Cloud DevOps\"]) === null || _categoryScores_CloudDevOps === void 0 ? void 0 : _categoryScores_CloudDevOps.score)\n    };\n    // Calculate overall score\n    const overallScore = parseFloat((Object.values(categoryScores).reduce((sum, cat)=>sum + cat.score, 0) / Object.values(categoryScores).length).toFixed(1));\n    // Format data for the report components\n    return formatReportData(clientInfo, categoryScores, maturityLevels, overallScore);\n}\n// Maturity levels data for reference\nconst MATURITY_LEVELS = [\n    {\n        level: -1,\n        threshold: 0,\n        name: \"Level -1: Regressive\",\n        description: \"Process unrepeatable, poorly controlled and reactive\"\n    },\n    {\n        level: 0,\n        threshold: 2,\n        name: \"Level 0: Repeatable\",\n        description: \"Process documented and partly automated\"\n    },\n    {\n        level: 1,\n        threshold: 3,\n        name: \"Level 1: Consistent\",\n        description: \"Automated processes applied across whole application lifecycle\"\n    },\n    {\n        level: 2,\n        threshold: 4,\n        name: \"Level 2: Quantitatively managed\",\n        description: \"Process measured and controlled\"\n    },\n    {\n        level: 3,\n        threshold: 4.5,\n        name: \"Level 3: Optimizing\",\n        description: \"Focus on process improvements\"\n    }\n];\n/**\n * Determines maturity level for Cloud Strategy\n * @param {number} score - Average score for Cloud Strategy\n * @returns {object} - Maturity level information\n */ function determineStrategyMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Ad hoc cloud usage without a defined strategy\"\n    };\n    if (score < 2) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Ad hoc cloud usage without a defined strategy\"\n    };\n    if (score < 3) return {\n        level: 2,\n        name: \"Level 2: Repeatable\",\n        description: \"Basic cloud strategy aligned with some business objectives\"\n    };\n    if (score < 4) return {\n        level: 3,\n        name: \"Level 3: Defined\",\n        description: \"Formalized cloud strategy integrated with business planning\"\n    };\n    if (score < 4.6) return {\n        level: 4,\n        name: \"Level 4: Managed\",\n        description: \"Cloud strategy is regularly reviewed and optimized\"\n    };\n    return {\n        level: 5,\n        name: \"Level 5: Optimized\",\n        description: \"Continuous improvement with proactive alignment to evolving business goals\"\n    };\n}\n/**\n * Determines maturity level for Cloud Cost Management\n * @param {number} score - Average score for Cloud Cost\n * @returns {object} - Maturity level information\n */ function determineCostMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Crawl\",\n        description: \"Limited cost visibility and control\"\n    };\n    if (score < 2.5) return {\n        level: 1,\n        name: \"Crawl\",\n        description: \"Basic cost visibility with initial tagging and reporting\"\n    };\n    if (score < 4) return {\n        level: 2,\n        name: \"Walk\",\n        description: \"Improved cost allocation and budgeting processes\"\n    };\n    return {\n        level: 3,\n        name: \"Run\",\n        description: \"Advanced forecasting, real-time cost monitoring, and strategic business alignment\"\n    };\n}\n/**\n * Determines maturity level for Cloud Security\n * @param {number} score - Average score for Cloud Security\n * @returns {object} - Maturity level information\n */ function determineSecurityMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Basic security measures with limited automation\"\n    };\n    if (score < 2) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Basic security measures with limited automation\"\n    };\n    if (score < 3) return {\n        level: 2,\n        name: \"Level 2: Managed\",\n        description: \"Improved visibility and some automated security processes\"\n    };\n    if (score < 4) return {\n        level: 3,\n        name: \"Level 3: Defined\",\n        description: \"Comprehensive security policies and procedures in place\"\n    };\n    if (score < 4.6) return {\n        level: 4,\n        name: \"Level 4: Quantitatively Managed\",\n        description: \"Security performance is measured and managed\"\n    };\n    return {\n        level: 5,\n        name: \"Level 5: Optimized\",\n        description: \"Continuous improvement with adaptive security measures\"\n    };\n}\n/**\n * Determines maturity level for Cloud People\n * @param {number} score - Average score for Cloud People\n * @returns {object} - Maturity level information\n */ function determinePeopleMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Limited cloud expertise with ad hoc training\"\n    };\n    if (score < 2) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Limited cloud expertise with ad hoc training\"\n    };\n    if (score < 3) return {\n        level: 2,\n        name: \"Level 2: Repeatable\",\n        description: \"Basic training programs established\"\n    };\n    if (score < 4) return {\n        level: 3,\n        name: \"Level 3: Defined\",\n        description: \"Structured training and development plans in place\"\n    };\n    if (score < 4.6) return {\n        level: 4,\n        name: \"Level 4: Managed\",\n        description: \"Regular assessment and improvement of cloud skills\"\n    };\n    return {\n        level: 5,\n        name: \"Level 5: Optimized\",\n        description: \"Continuous learning culture with advanced skill development\"\n    };\n}\n/**\n * Determines maturity level for Cloud DevOps\n * @param {number} score - Average score for Cloud DevOps\n * @returns {object} - Maturity level information\n */ function determineDevOpsMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Manual processes with minimal collaboration\"\n    };\n    if (score < 2) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Manual processes with minimal collaboration\"\n    };\n    if (score < 3) return {\n        level: 2,\n        name: \"Level 2: Managed\",\n        description: \"Basic automation and improved team collaboration\"\n    };\n    if (score < 4) return {\n        level: 3,\n        name: \"Level 3: Defined\",\n        description: \"Standardized processes with integrated tools\"\n    };\n    if (score < 4.6) return {\n        level: 4,\n        name: \"Level 4: Quantitatively Managed\",\n        description: \"Metrics-driven improvements and proactive incident management\"\n    };\n    return {\n        level: 5,\n        name: \"Level 5: Optimized\",\n        description: \"Fully automated pipelines with continuous delivery and feedback loops\"\n    };\n}\n/**\n * Determines overall maturity level\n * @param {number} score - Overall maturity score\n * @returns {string} - Overall maturity level name\n */ function determineOverallMaturityLevel(score) {\n    if (score < 2) return \"Level 1: Initial\";\n    if (score < 3) return \"Level 2: Repeatable\";\n    if (score < 4) return \"Level 3: Defined\";\n    if (score < 4.6) return \"Level 4: Managed\";\n    return \"Level 5: Optimized\";\n}\n/**\n * Formats assessment data for report components\n * @param {object} clientInfo - Client information\n * @param {object} categoryScores - Scores by category\n * @param {object} maturityLevels - Maturity levels by category\n * @param {number} overallScore - Overall maturity score\n * @returns {object} - Formatted report data\n */ // function formatReportData(\n//   clientInfo,\n//   categoryScores,\n//   maturityLevels,\n//   overallScore\n// ) {\n//   // Create radar chart data from category scores\n//   const dimensionalScores = Object.entries(categoryScores).map(\n//     ([dimension, data]) => ({\n//       dimension,\n//       score: data.score,\n//       fullMark: 5,\n//     })\n//   )\n//   // Generate recommendations based on scores and maturity levels\n//   const recommendations = generateRecommendations(\n//     categoryScores,\n//     maturityLevels\n//   )\n//   // Generate short-term focus areas based on lowest scores\n//   const shortTermFocus = generateShortTermFocus(categoryScores)\n//   // Generate long-term objectives\n//   const longTermObjectives = generateLongTermObjectives(categoryScores)\n//   // Calculate potential savings\n//   const annualCloudSpend = estimateAnnualCloudSpend(\n//     clientInfo.size,\n//     clientInfo.industry\n//   )\n//   const potentialSavingsPercentage = calculatePotentialSavings(categoryScores)\n//   const annualSavingsOpportunity = Math.round(\n//     annualCloudSpend * potentialSavingsPercentage\n//   )\n//   // Generate summary findings\n//   const summaryFindings = generateSummaryFindings(categoryScores)\n//   // Create cloud spend by service data\n//   const cloudSpendByService = [\n//     { name: \"Compute\", value: Math.round(annualCloudSpend * 0.45) },\n//     { name: \"Storage\", value: Math.round(annualCloudSpend * 0.25) },\n//     { name: \"Database\", value: Math.round(annualCloudSpend * 0.15) },\n//     { name: \"Networking\", value: Math.round(annualCloudSpend * 0.1) },\n//     { name: \"Other\", value: Math.round(annualCloudSpend * 0.05) },\n//   ]\n//   // Create trend data\n//   const trendData = [\n//     {\n//       name: \"Q1 2024\",\n//       spend: Math.round(annualCloudSpend * 0.2),\n//       projected: Math.round(annualCloudSpend * 0.2),\n//     },\n//     {\n//       name: \"Q2 2024\",\n//       spend: Math.round(annualCloudSpend * 0.22),\n//       projected: Math.round(annualCloudSpend * 0.21),\n//     },\n//     {\n//       name: \"Q3 2024\",\n//       spend: Math.round(annualCloudSpend * 0.28),\n//       projected: Math.round(annualCloudSpend * 0.27),\n//     },\n//     {\n//       name: \"Q4 2024\",\n//       spend: Math.round(annualCloudSpend * 0.3),\n//       projected: Math.round(annualCloudSpend * 0.29),\n//     },\n//     {\n//       name: \"Q1 2025\",\n//       spend: null,\n//       projected: Math.round(annualCloudSpend * 0.25),\n//     },\n//     {\n//       name: \"Q2 2025\",\n//       spend: null,\n//       projected: Math.round(annualCloudSpend * 0.22),\n//     },\n//   ]\n//   // Practice areas for maturity table\n//   const practiceAreas = [\n//     {\n//       id: \"buildManagement\",\n//       name: \"Build management and CI\",\n//       currentLevel: determinePracticeLevel(categoryScores, \"Cloud DevOps\"),\n//       targetLevel: Math.min(\n//         determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1,\n//         3\n//       ),\n//     },\n//     {\n//       id: \"environment\",\n//       name: \"Environment and deployments\",\n//       currentLevel: determinePracticeLevel(categoryScores, \"Cloud DevOps\"),\n//       targetLevel: Math.min(\n//         determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1,\n//         3\n//       ),\n//     },\n//     {\n//       id: \"release\",\n//       name: \"Release management\",\n//       currentLevel: determinePracticeLevel(categoryScores, \"Cloud DevOps\"),\n//       targetLevel: Math.min(\n//         determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1,\n//         3\n//       ),\n//     },\n//     {\n//       id: \"testing\",\n//       name: \"Testing\",\n//       currentLevel: Math.max(\n//         determinePracticeLevel(categoryScores, \"Cloud DevOps\") - 1,\n//         -1\n//       ),\n//       targetLevel: Math.min(\n//         determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1,\n//         3\n//       ),\n//     },\n//     {\n//       id: \"dataManagement\",\n//       name: \"Data Management\",\n//       currentLevel: determinePracticeLevel(categoryScores, \"Cloud Strategy\"),\n//       targetLevel: Math.min(\n//         determinePracticeLevel(categoryScores, \"Cloud Strategy\") + 1,\n//         3\n//       ),\n//     },\n//   ]\n//   // Implementation roadmap phases\n//   const implementationRoadmap = [\n//     {\n//       phase: \"Immediate (0-30 days)\",\n//       actions: [\n//         \"Implement automated instance scheduling\",\n//         \"Standardize resource tagging\",\n//       ],\n//     },\n//     {\n//       phase: \"Short-term (1-3 months)\",\n//       actions: [\n//         \"Right-size oversized instances\",\n//         \"Implement S3 lifecycle policies\",\n//       ],\n//     },\n//     {\n//       phase: \"Medium-term (3-6 months)\",\n//       actions: [\"Expand IaC coverage\", \"Implement cost anomaly detection\"],\n//     },\n//     {\n//       phase: \"Long-term (6-12 months)\",\n//       actions: [\n//         \"Implement FinOps practices\",\n//         \"Container orchestration strategy\",\n//       ],\n//     },\n//   ]\n//   // Return the complete data object expected by report components\n//   return {\n//     reportMetadata: {\n//       organizationName: clientInfo.business,\n//       clientName: clientInfo.name,\n//       clientEmail: clientInfo.email,\n//       clientSize: clientInfo.size,\n//       clientIndustry: clientInfo.industry,\n//       reportDate: new Date().toLocaleDateString(\"en-US\", {\n//         year: \"numeric\",\n//         month: \"long\",\n//         day: \"numeric\",\n//       }),\n//       reportPeriod: `Q${Math.ceil(\n//         (new Date().getMonth() + 1) / 3\n//       )} ${new Date().getFullYear()}`,\n//     },\n//     executiveSummary: {\n//       sectionTitle: \"Executive Summary\",\n//       subtopics: [\n//         {\n//           title: \"Overview\",\n//           content: `This report presents a comprehensive assessment of ${clientInfo.business}'s cloud infrastructure and practices. Our AI-powered analysis examined your organization's cloud maturity across key dimensions and identified optimization opportunities.`,\n//         },\n//         {\n//           title: \"Purpose\",\n//           content:\n//             \"This assessment aims to help you optimize cloud costs, improve operational efficiency, and align cloud infrastructure with business objectives through data-driven recommendations.\",\n//         },\n//         {\n//           title: \"Methodology\",\n//           content:\n//             \"We analyzed your responses using a proprietary algorithm that compares your practices against industry benchmarks and identifies optimization opportunities based on proven best practices.\",\n//         },\n//         {\n//           title: \"Key Focuses\",\n//           content: [\n//             \"Cloud cost optimization across all service categories\",\n//             \"Infrastructure as Code (IaC) implementation and improvement\",\n//             \"Resource right-sizing and elimination of waste\",\n//             \"Governance and operational efficiency\",\n//           ],\n//         },\n//         {\n//           title: \"Summary of Findings\",\n//           content: summaryFindings,\n//         },\n//         {\n//           title: \"Key Recommendations\",\n//           content: recommendations.slice(0, 4).map((rec) => rec.title),\n//         },\n//         {\n//           title: \"Expected Impact\",\n//           content: `Implementation of our recommendations could reduce your annual cloud spend by approximately ${Math.round(\n//             potentialSavingsPercentage * 100\n//           )}%, resulting in potential savings of $${annualSavingsOpportunity.toLocaleString()} per year while improving performance and security.`,\n//         },\n//       ],\n//     },\n//     cloudSpend: {\n//       total: annualCloudSpend,\n//       annualSavingsOpportunity: annualSavingsOpportunity,\n//       byService: cloudSpendByService,\n//       trends: trendData,\n//     },\n//     cloudMaturityAssessment: {\n//       sectionTitle: \"Cloud Maturity Assessment\",\n//       overallScore: overallScore,\n//       currentLevel: determineOverallMaturityLevel(overallScore),\n//       maturityLevels: MATURITY_LEVELS,\n//       subtopics: [\n//         {\n//           title: \"Understanding Cloud Maturity\",\n//           content:\n//             \"Cloud maturity measures how effectively an organization adopts, manages, and optimizes cloud resources and practices. Higher maturity correlates with better efficiency, security, and cost optimization.\",\n//         },\n//         {\n//           title: \"Current Cloud Maturity Level\",\n//           content: `With an overall score of ${overallScore.toFixed(\n//             1\n//           )}/5.0, your organization is at ${determineOverallMaturityLevel(\n//             overallScore\n//           )}. This indicates ${interpretMaturityLevel(overallScore)}.`,\n//         },\n//         {\n//           title: \"Dimensional Analysis\",\n//           content:\n//             \"The radar chart shows your organization's performance across six critical cloud dimensions. Areas closer to the center represent opportunities for improvement.\",\n//           dimensionalScores: dimensionalScores,\n//         },\n//         {\n//           title: \"Growth Trajectory & Recommendations\",\n//           content:\n//             \"Based on your assessment results, we've identified specific focus areas to help advance your cloud maturity to the next level.\",\n//           shortTermFocus: shortTermFocus,\n//           longTermObjectives: longTermObjectives,\n//         },\n//       ],\n//       practiceAreas: practiceAreas,\n//       description:\n//         \"This maturity assessment shows your current position and target state across key DevOps and cloud practices.\",\n//     },\n//     recommendations: {\n//       sectionTitle: \"Recommendations & Action Plan\",\n//       keyRecommendations: recommendations,\n//       expectedImpact: {\n//         annualSavings: annualSavingsOpportunity,\n//         roiPercentage: 350,\n//         additionalBenefits:\n//           \"Beyond cost savings, these recommendations will improve security posture, reduce operational overhead, and increase development velocity.\",\n//       },\n//       implementationRoadmap: implementationRoadmap,\n//       nextSteps: [\n//         \"Schedule implementation planning session with MakeStuffGo team\",\n//         \"Identify internal stakeholders for each recommendation area\",\n//         \"Establish progress tracking metrics\",\n//         \"Set up bi-weekly progress reviews\",\n//       ],\n//     },\n//   }\n// }\nfunction formatReportData(clientInfo, categoryScores, maturityLevels, overallScore) {\n    // Create radar chart data for maturity dimensions\n    const dimensionalScores = Object.entries(categoryScores).map((param)=>{\n        let [dimension, data] = param;\n        return {\n            dimension,\n            score: data.score,\n            fullMark: 5\n        };\n    });\n    // Practice areas for maturity table\n    const practiceAreas = [\n        {\n            id: \"buildManagement\",\n            name: \"Build management and CI\",\n            currentLevel: determinePracticeLevel(categoryScores, \"Cloud DevOps\"),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1, 3)\n        },\n        {\n            id: \"environment\",\n            name: \"Environment and deployments\",\n            currentLevel: determinePracticeLevel(categoryScores, \"Cloud DevOps\"),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1, 3)\n        },\n        {\n            id: \"release\",\n            name: \"Release management\",\n            currentLevel: determinePracticeLevel(categoryScores, \"Cloud DevOps\"),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1, 3)\n        },\n        {\n            id: \"testing\",\n            name: \"Testing\",\n            currentLevel: Math.max(determinePracticeLevel(categoryScores, \"Cloud DevOps\") - 1, -1),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1, 3)\n        },\n        {\n            id: \"dataManagement\",\n            name: \"Data Management\",\n            currentLevel: determinePracticeLevel(categoryScores, \"Cloud Strategy\"),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud Strategy\") + 1, 3)\n        }\n    ];\n    // Generate necessary sections\n    const recommendations = generateRecommendations(categoryScores, maturityLevels);\n    const shortTermFocus = generateShortTermFocus(categoryScores);\n    const longTermObjectives = generateLongTermObjectives(categoryScores);\n    const summaryFindings = generateSummaryFindings(categoryScores);\n    return {\n        reportMetadata: {\n            organizationName: clientInfo.business,\n            clientName: clientInfo.name,\n            clientEmail: clientInfo.email,\n            clientSize: clientInfo.size,\n            clientIndustry: clientInfo.industry,\n            reportDate: new Date().toLocaleDateString(\"en-US\", {\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\"\n            }),\n            reportPeriod: \"Q\".concat(Math.ceil((new Date().getMonth() + 1) / 3), \" \").concat(new Date().getFullYear())\n        },\n        executiveSummary: {\n            sectionTitle: \"Executive Summary\",\n            subtopics: [\n                {\n                    title: \"Overview\",\n                    content: \"This report presents an overview of \".concat(clientInfo.business, \"'s cloud infrastructure maturity.\")\n                },\n                {\n                    title: \"Purpose\",\n                    content: \"To assess and recommend improvements for cloud practices and maturity.\"\n                },\n                {\n                    title: \"Methodology\",\n                    content: \"Assessment responses analyzed against industry standards to identify gaps and opportunities.\"\n                },\n                {\n                    title: \"Key Focuses\",\n                    content: [\n                        \"Cloud cost optimization\",\n                        \"Infrastructure as Code (IaC) practices\",\n                        \"Automation and DevOps improvements\",\n                        \"Governance and operational excellence\"\n                    ]\n                },\n                {\n                    title: \"Summary of Findings\",\n                    content: summaryFindings\n                },\n                {\n                    title: \"Key Recommendations\",\n                    content: recommendations.slice(0, 4).map((rec)=>rec.title)\n                }\n            ]\n        },\n        cloudMaturityAssessment: {\n            sectionTitle: \"Cloud Maturity Assessment\",\n            overallScore: overallScore,\n            currentLevel: determineOverallMaturityLevel(overallScore),\n            maturityLevels: MATURITY_LEVELS,\n            subtopics: [\n                {\n                    title: \"Understanding Cloud Maturity\",\n                    content: \"Cloud maturity measures the effectiveness and optimization of cloud adoption and practices.\"\n                },\n                {\n                    title: \"Current Cloud Maturity Level\",\n                    content: \"With an overall score of \".concat(overallScore.toFixed(1), \"/5.0, your organization is at \").concat(determineOverallMaturityLevel(overallScore), \". \").concat(interpretMaturityLevel(overallScore))\n                },\n                {\n                    title: \"Dimensional Analysis\",\n                    content: \"This radar chart highlights strengths and improvement areas across cloud domains.\",\n                    dimensionalScores: dimensionalScores\n                },\n                {\n                    title: \"Growth Trajectory & Recommendations\",\n                    content: \"Focus areas and goals to accelerate cloud maturity.\",\n                    shortTermFocus: shortTermFocus,\n                    longTermObjectives: longTermObjectives\n                }\n            ],\n            practiceAreas: practiceAreas,\n            description: \"This maturity assessment shows your current position and target state across key DevOps and cloud practices.\"\n        },\n        recommendations: {\n            sectionTitle: \"Recommendations & Action Plan\",\n            keyRecommendations: recommendations,\n            implementationRoadmap: [\n                {\n                    phase: \"Immediate (0-30 days)\",\n                    actions: [\n                        \"Implement automated instance scheduling\",\n                        \"Standardize resource tagging\"\n                    ]\n                },\n                {\n                    phase: \"Short-term (1-3 months)\",\n                    actions: [\n                        \"Right-size oversized instances\",\n                        \"Implement S3 lifecycle policies\"\n                    ]\n                },\n                {\n                    phase: \"Medium-term (3-6 months)\",\n                    actions: [\n                        \"Expand Infrastructure as Code (IaC) practices\",\n                        \"Introduce cost anomaly detection\"\n                    ]\n                },\n                {\n                    phase: \"Long-term (6-12 months)\",\n                    actions: [\n                        \"Adopt FinOps best practices\",\n                        \"Enhance container orchestration strategies\"\n                    ]\n                }\n            ],\n            nextSteps: [\n                \"Schedule a planning session with MakeStuffGo team\",\n                \"Assign internal stakeholders to each recommendation area\",\n                \"Track progress with bi-weekly reviews\"\n            ]\n        }\n    };\n}\n/**\n * Helper function to determine practice level based on category score\n * @param {object} categoryScores - Scores by category\n * @param {string} category - Category name\n * @returns {number} - Practice level\n */ function determinePracticeLevel(categoryScores, category) {\n    var _categoryScores_category;\n    const score = ((_categoryScores_category = categoryScores[category]) === null || _categoryScores_category === void 0 ? void 0 : _categoryScores_category.score) || 3;\n    if (score < 2) return -1 // Level -1: Regressive\n    ;\n    if (score < 3) return 0 // Level 0: Repeatable\n    ;\n    if (score < 4) return 1 // Level 1: Consistent\n    ;\n    if (score < 4.6) return 2 // Level 2: Quantitatively managed\n    ;\n    return 3 // Level 3: Optimizing\n    ;\n}\n/**\n * Interpret maturity level description\n * @param {number} score - Maturity score\n * @returns {string} - Interpretation\n */ function interpretMaturityLevel(score) {\n    if (score < 2) return \"significant room for improvement in your cloud practices\";\n    if (score < 3) return \"established cloud practices with opportunities for automation and standardization\";\n    if (score < 4) return \"good cloud practices with opportunities for optimization and measurement\";\n    return \"advanced cloud practices with opportunities for continuous improvement\";\n}\n/**\n * Generate short-term focus areas based on lowest scores\n * @param {object} categoryScores - Scores by category\n * @returns {array} - Short-term focus areas\n */ function generateShortTermFocus(categoryScores) {\n    const focusAreas = [];\n    const sortedCategories = Object.entries(categoryScores).sort((a, b)=>a[1].score - b[1].score).slice(0, 3);\n    sortedCategories.forEach((param)=>{\n        let [category, data] = param;\n        if (category === \"Cloud Strategy\") {\n            focusAreas.push(\"Develop comprehensive cloud governance framework\");\n        } else if (category === \"Cloud Cost\") {\n            focusAreas.push(\"Implement automated cost monitoring and reporting\");\n        } else if (category === \"Cloud Security\") {\n            focusAreas.push(\"Enhance security controls and compliance monitoring\");\n        } else if (category === \"Cloud DevOps\") {\n            focusAreas.push(\"Automate deployment and testing processes\");\n        } else if (category === \"Cloud People\") {\n            focusAreas.push(\"Implement cloud skills development program\");\n        }\n    });\n    return focusAreas;\n}\n/**\n * Generate long-term objectives\n * @param {object} categoryScores - Scores by category\n * @returns {array} - Long-term objectives\n */ function generateLongTermObjectives(categoryScores) {\n    return [\n        \"Establish a mature FinOps practice with proactive optimization\",\n        \"Achieve 90%+ infrastructure-as-code coverage\",\n        \"Implement advanced multi-cloud strategy with automated workload balancing\",\n        \"Develop AI-driven cloud optimization capabilities\"\n    ];\n}\n/**\n * Generate summary findings based on scores\n * @param {object} categoryScores - Scores by category\n * @returns {array} - Summary findings\n */ function generateSummaryFindings(categoryScores) {\n    var _categoryScores_CloudCost, _categoryScores_CloudDevOps, _categoryScores_CloudSecurity, _categoryScores_CloudStrategy;\n    const findings = [];\n    if ((((_categoryScores_CloudCost = categoryScores[\"Cloud Cost\"]) === null || _categoryScores_CloudCost === void 0 ? void 0 : _categoryScores_CloudCost.score) || 0) < 3.5) {\n        findings.push(\"Cloud cost management practices need improvement with potential for 25-35% cost reduction\");\n    }\n    if ((((_categoryScores_CloudDevOps = categoryScores[\"Cloud DevOps\"]) === null || _categoryScores_CloudDevOps === void 0 ? void 0 : _categoryScores_CloudDevOps.score) || 0) < 3.5) {\n        findings.push(\"DevOps automation maturity is below industry average, impacting deployment efficiency\");\n    }\n    if ((((_categoryScores_CloudSecurity = categoryScores[\"Cloud Security\"]) === null || _categoryScores_CloudSecurity === void 0 ? void 0 : _categoryScores_CloudSecurity.score) || 0) < 4) {\n        findings.push(\"Security controls require enhancement to meet industry best practices\");\n    }\n    if ((((_categoryScores_CloudStrategy = categoryScores[\"Cloud Strategy\"]) === null || _categoryScores_CloudStrategy === void 0 ? void 0 : _categoryScores_CloudStrategy.score) || 0) < 3.5) {\n        findings.push(\"Cloud governance framework needs standardization across the organization\");\n    }\n    // Add at least one positive finding\n    const bestCategory = Object.entries(categoryScores).sort((a, b)=>b[1].score - a[1].score)[0];\n    if (bestCategory && bestCategory[1].score >= 3.5) {\n        findings.push(\"Strong performance in \".concat(bestCategory[0], \" with a score of \").concat(bestCategory[1].score.toFixed(1), \"/5.0\"));\n    } else {\n        findings.push(\"Multiple opportunities identified to enhance cloud maturity across all dimensions\");\n    }\n    return findings;\n}\n/**\n * Calculate potential savings percentage based on category scores\n * @param {object} categoryScores - Scores by category\n * @returns {number} - Savings percentage\n */ function calculatePotentialSavings(categoryScores) {\n    var _categoryScores_CloudCost, _categoryScores_CloudStrategy, _categoryScores_CloudDevOps;\n    // Lower scores in Cost and Strategy categories indicate higher savings potential\n    const costScore = ((_categoryScores_CloudCost = categoryScores[\"Cloud Cost\"]) === null || _categoryScores_CloudCost === void 0 ? void 0 : _categoryScores_CloudCost.score) || 3;\n    const strategyScore = ((_categoryScores_CloudStrategy = categoryScores[\"Cloud Strategy\"]) === null || _categoryScores_CloudStrategy === void 0 ? void 0 : _categoryScores_CloudStrategy.score) || 3;\n    const devopsScore = ((_categoryScores_CloudDevOps = categoryScores[\"Cloud DevOps\"]) === null || _categoryScores_CloudDevOps === void 0 ? void 0 : _categoryScores_CloudDevOps.score) || 3;\n    // Calculate base savings potential\n    let savingsPotential = 0.4 - costScore / 10 - strategyScore / 15 - devopsScore / 20;\n    // Ensure savings are in a reasonable range\n    return Math.min(Math.max(savingsPotential, 0.1), 0.45);\n}\n/**\n * Estimate annual cloud spend based on company size and industry\n * @param {string} size - Company size\n * @param {string} industry - Industry\n * @returns {number} - Estimated annual cloud spend\n */ function estimateAnnualCloudSpend(size, industry) {\n    // Default base spend\n    let baseSpend = 500000;\n    // Adjust based on company size\n    const sizeNum = parseInt(size) || 50;\n    if (sizeNum < 20) {\n        baseSpend = 100000;\n    } else if (sizeNum < 100) {\n        baseSpend = 300000;\n    } else if (sizeNum < 500) {\n        baseSpend = 1000000;\n    } else {\n        baseSpend = 3000000;\n    }\n    // Industry multipliers\n    const industryMultipliers = {\n        Technology: 1.5,\n        Finance: 1.3,\n        Healthcare: 1.1,\n        Retail: 0.9,\n        Education: 0.7,\n        Manufacturing: 0.8\n    };\n    const multiplier = industryMultipliers[industry] || 1.0;\n    return Math.round(baseSpend * multiplier);\n}\n/**\n * Generate prioritized recommendations\n * @param {object} categoryScores - Scores by category\n * @param {object} maturityLevels - Maturity levels by category\n * @returns {array} - Recommendations\n */ function generateRecommendations(categoryScores, maturityLevels) {\n    var _categoryScores_CloudCost, _categoryScores_CloudStrategy, _categoryScores_CloudDevOps, _categoryScores_CloudSecurity;\n    const recommendations = [];\n    // Cloud Cost recommendations\n    if ((((_categoryScores_CloudCost = categoryScores[\"Cloud Cost\"]) === null || _categoryScores_CloudCost === void 0 ? void 0 : _categoryScores_CloudCost.score) || 0) < 3.5) {\n        var _categoryScores_CloudCost1;\n        recommendations.push({\n            title: \"Implement Automated Instance Scheduling\",\n            rationale: \"Non-production resources are running 24/7, resulting in unnecessary costs during inactive hours.\",\n            impact: \"15-20% reduction in compute costs\",\n            priority: \"Critical\"\n        });\n        recommendations.push({\n            title: \"Right-size Oversized Instances\",\n            rationale: \"Analysis shows 35% of compute instances are significantly over-provisioned.\",\n            impact: \"20-25% reduction in instance costs\",\n            priority: (((_categoryScores_CloudCost1 = categoryScores[\"Cloud Cost\"]) === null || _categoryScores_CloudCost1 === void 0 ? void 0 : _categoryScores_CloudCost1.score) || 0) < 3 ? \"Critical\" : \"High\"\n        });\n    }\n    // Cloud Strategy recommendations\n    if ((((_categoryScores_CloudStrategy = categoryScores[\"Cloud Strategy\"]) === null || _categoryScores_CloudStrategy === void 0 ? void 0 : _categoryScores_CloudStrategy.score) || 0) < 4) {\n        var _categoryScores_CloudStrategy1;\n        recommendations.push({\n            title: \"Standardize Resource Tagging\",\n            rationale: \"Inconsistent tagging prevents accurate cost allocation and governance.\",\n            impact: \"Improved cost visibility and governance\",\n            priority: (((_categoryScores_CloudStrategy1 = categoryScores[\"Cloud Strategy\"]) === null || _categoryScores_CloudStrategy1 === void 0 ? void 0 : _categoryScores_CloudStrategy1.score) || 0) < 3 ? \"Critical\" : \"High\"\n        });\n        recommendations.push({\n            title: \"Implement Cost Anomaly Detection\",\n            rationale: \"Unexpected cost spikes are not being detected promptly.\",\n            impact: \"Early detection of cost issues\",\n            priority: \"Medium\"\n        });\n    }\n    // Cloud DevOps recommendations\n    if ((((_categoryScores_CloudDevOps = categoryScores[\"Cloud DevOps\"]) === null || _categoryScores_CloudDevOps === void 0 ? void 0 : _categoryScores_CloudDevOps.score) || 0) < 4) {\n        var _categoryScores_CloudDevOps1;\n        recommendations.push({\n            title: \"Expand Infrastructure as Code Coverage\",\n            rationale: \"Only 40% of infrastructure is currently managed as code, leading to configuration drift.\",\n            impact: \"Reduced provisioning time and configuration errors\",\n            priority: (((_categoryScores_CloudDevOps1 = categoryScores[\"Cloud DevOps\"]) === null || _categoryScores_CloudDevOps1 === void 0 ? void 0 : _categoryScores_CloudDevOps1.score) || 0) < 3 ? \"Critical\" : \"High\"\n        });\n    }\n    // Cloud Security recommendations\n    if ((((_categoryScores_CloudSecurity = categoryScores[\"Cloud Security\"]) === null || _categoryScores_CloudSecurity === void 0 ? void 0 : _categoryScores_CloudSecurity.score) || 0) < 4) {\n        var _categoryScores_CloudSecurity1;\n        recommendations.push({\n            title: \"Enhance IAM Controls and Monitoring\",\n            rationale: \"Current identity management practices don't follow principle of least privilege.\",\n            impact: \"Reduced security risk exposure\",\n            priority: (((_categoryScores_CloudSecurity1 = categoryScores[\"Cloud Security\"]) === null || _categoryScores_CloudSecurity1 === void 0 ? void 0 : _categoryScores_CloudSecurity1.score) || 0) < 3 ? \"Critical\" : \"Medium\"\n        });\n    }\n    // Add storage recommendations\n    recommendations.push({\n        title: \"Implement S3 Lifecycle Policies\",\n        rationale: \"Large volumes of infrequently accessed data are stored on premium storage tiers.\",\n        impact: \"25-30% reduction in storage costs\",\n        priority: \"Medium\"\n    });\n    return recommendations;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    processAssessmentData\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYXNzZXNzbWVudFV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNkJBQTZCO0FBRTdCOzs7O0NBSUMsR0FDTSxTQUFTQSxzQkFBc0JDLFNBQVMsRUFBRUMsaUJBQWlCO1FBR3hERCxpQkFFSkEsa0JBQ0tBLGtCQUNEQSxrQkFFSkEsa0JBOENBRSwrQkFHQUEsMkJBR0FBLCtCQUdBQSw2QkFHQUE7SUFsRUosNkJBQTZCO0lBQzdCLE1BQU1DLGFBQWE7UUFDakJDLE1BQU1KLEVBQUFBLGtCQUFBQSxVQUFVSyxJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsVUFBVSxLQUFLLGdCQUF2Q1Asc0NBQUFBLGdCQUEyQ1EsWUFBWSxLQUFJO1FBQ2pFQyxVQUNFVCxFQUFBQSxtQkFBQUEsVUFBVUssSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVDLFVBQVUsS0FBSyxnQkFBdkNQLHVDQUFBQSxpQkFBMkNRLFlBQVksS0FBSTtRQUM3REUsT0FBT1YsRUFBQUEsbUJBQUFBLFVBQVVLLElBQUksQ0FBQyxDQUFDQyxJQUFNQSxFQUFFQyxVQUFVLEtBQUssZ0JBQXZDUCx1Q0FBQUEsaUJBQTJDUSxZQUFZLEtBQUk7UUFDbEVHLE1BQU1YLEVBQUFBLG1CQUFBQSxVQUFVSyxJQUFJLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUMsVUFBVSxLQUFLLGdCQUF2Q1AsdUNBQUFBLGlCQUEyQ1EsWUFBWSxLQUFJO1FBQ2pFSSxVQUNFWixFQUFBQSxtQkFBQUEsVUFBVUssSUFBSSxDQUFDLENBQUNDLElBQU1BLEVBQUVDLFVBQVUsS0FBSyxnQkFBdkNQLHVDQUFBQSxpQkFBMkNRLFlBQVksS0FBSTtJQUMvRDtJQUVBLHFEQUFxRDtJQUNyRCxNQUFNSyxjQUFjLENBQUM7SUFDckJaLGtCQUFrQmEsT0FBTyxDQUFDLENBQUNDO1FBQ3pCLElBQUlBLFNBQVNSLFVBQVUsRUFBRTtZQUN2Qk0sV0FBVyxDQUFDRSxTQUFTUixVQUFVLENBQUMs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WUFDUkMsVUFBVTtRQUNaO0lBQ0Y7SUFFQSwrQkFBK0I7SUFDL0IsSUFBSSxDQUFDNUgsRUFBQUEsOEJBQUFBLGNBQWMsQ0FBQyxlQUFlLGNBQTlCQSxrREFBQUEsNEJBQWdDMEIsS0FBSyxLQUFJLEtBQUssR0FBRztZQU8vQzFCO1FBTkwwRCxnQkFBZ0IyQyxJQUFJLENBQUM7WUFDbkJoQixPQUFPO1lBQ1BxQyxXQUNFO1lBQ0ZDLFFBQVE7WUFDUkMsVUFDRSxDQUFDNUgsRUFBQUEsK0JBQUFBLGNBQWMsQ0FBQyxlQUFlLGNBQTlCQSxtREFBQUEsNkJBQWdDMEIsS0FBSyxLQUFJLEtBQUssSUFBSSxhQUFhO1FBQ3BFO0lBQ0Y7SUFFQSxpQ0FBaUM7SUFDakMsSUFBSSxDQUFDMUIsRUFBQUEsZ0NBQUFBLGNBQWMsQ0FBQyxpQkFBaUIsY0FBaENBLG9EQUFBQSw4QkFBa0MwQixLQUFLLEtBQUksS0FBSyxHQUFHO1lBT2pEMUI7UUFOTDBELGdCQUFnQjJDLElBQUksQ0FBQztZQUNuQmhCLE9BQU87WUFDUHFDLFdBQ0U7WUFDRkMsUUFBUTtZQUNSQyxVQUNFLENBQUM1SCxFQUFBQSxpQ0FBQUEsY0FBYyxDQUFDLGlCQUFpQixjQUFoQ0EscURBQUFBLCtCQUFrQzBCLEtBQUssS0FBSSxLQUFLLElBQzdDLGFBQ0E7UUFDUjtJQUNGO0lBRUEsOEJBQThCO0lBQzlCZ0MsZ0JBQWdCMkMsSUFBSSxDQUFDO1FBQ25CaEIsT0FBTztRQUNQcUMsV0FDRTtRQUNGQyxRQUFRO1FBQ1JDLFVBQVU7SUFDWjtJQUVBLE9BQU9sRTtBQUNUO0FBRUEsaUVBQWU7SUFDYjdEO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL21hZW1lZW5vaS9MaWJyYXJ5L0Nsb3VkU3RvcmFnZS9PbmVEcml2ZS1BcmFJbnN0aXR1dGVvZkNhbnRlcmJ1cnkvRGVza3RvcC9TVFVEWSBCSUNUL1NlbGYtUHJvamVjdC9wZGYtZ2VuZXJhdG9yLWNvbm5lY3QtdG8tTXlTUUwtaW5kdXN0cnktc3RhbmRhci9zcmMvbGliL2Fzc2Vzc21lbnRVdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvbGliL2Fzc2Vzc21lbnRVdGlscy5qc1xuXG4vKipcbiAqIFByb2Nlc3NlcyBkYXRhYmFzZSByZXNwb25zZXMgaW50byBtYXR1cml0eSBhc3Nlc3NtZW50IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IHJlc3BvbnNlcyAtIEFycmF5IG9mIHJlc3BvbnNlIG9iamVjdHMgZnJvbSB0aGUgZGF0YWJhc2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFByb2Nlc3NlZCBhc3Nlc3NtZW50IGRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NBc3Nlc3NtZW50RGF0YShyZXNwb25zZXMsIGluZHVzdHJ5U3RhbmRhcmRzKSB7XG4gIC8vIEV4dHJhY3QgY2xpZW50IGluZm9ybWF0aW9uXG4gIGNvbnN0IGNsaWVudEluZm8gPSB7XG4gICAgbmFtZTogcmVzcG9uc2VzLmZpbmQoKHIpID0+IHIuUXVlc3Rpb25JRCA9PT0gMSk/LlJlc3BvbnNlVGV4dCB8fCBcIlVua25vd25cIixcbiAgICBidXNpbmVzczpcbiAgICAgIHJlc3BvbnNlcy5maW5kKChyKSA9PiByLlF1ZXN0aW9uSUQgPT09IDIpPy5SZXNwb25zZVRleHQgfHwgXCJVbmtub3duXCIsXG4gICAgZW1haWw6IHJlc3BvbnNlcy5maW5kKChyKSA9PiByLlF1ZXN0aW9uSUQgPT09IDMpPy5SZXNwb25zZVRleHQgfHwgXCJVbmtub3duXCIsXG4gICAgc2l6ZTogcmVzcG9uc2VzLmZpbmQoKHIpID0+IHIuUXVlc3Rpb25JRCA9PT0gNCk/LlJlc3BvbnNlVGV4dCB8fCBcIlVua25vd25cIixcbiAgICBpbmR1c3RyeTpcbiAgICAgIHJlc3BvbnNlcy5maW5kKChyKSA9PiByLlF1ZXN0aW9uSUQgPT09IDUpPy5SZXNwb25zZVRleHQgfHwgXCJVbmtub3duXCIsXG4gIH1cblxuICAvLyBDcmVhdGUgYSBtYXAgb2YgSW5kdXN0cnkgU3RhbmRhcmRzIGZvciBmYXN0IGxvb2t1cFxuICBjb25zdCBzdGFuZGFyZE1hcCA9IHt9XG4gIGluZHVzdHJ5U3RhbmRhcmRzLmZvckVhY2goKHN0YW5kYXJkKSA9PiB7XG4gICAgaWYgKHN0YW5kYXJkLlF1ZXN0aW9uSUQpIHtcbiAgICAgIHN0YW5kYXJkTWFwW3N0YW5kYXJkLlF1ZXN0aW9uSURdID0gc3RhbmRhcmQuU3RhbmRhcmRUZXh0XG4gICAgfVxuICB9KVxuXG4gIC8vIEdyb3VwIHF1ZXN0aW9ucyBieSBjYXRlZ29yeVxuICBjb25zdCBjYXRlZ29yeU1hcHBpbmcgPSB7XG4gICAgXCJDbG91ZCBTdHJhdGVneVwiOiBbNiwgNywgOF0sXG4gICAgXCJDbG91ZCBDb3N0XCI6IFs5LCAxMCwgMTFdLFxuICAgIFwiQ2xvdWQgU2VjdXJpdHlcIjogWzEyLCAxM10sXG4gICAgXCJDbG91ZCBQZW9wbGVcIjogWzE0LCAxOSwgMjBdLFxuICAgIFwiQ2xvdWQgRGV2T3BzXCI6IFsxNSwgMTYsIDE3LCAxOF0sXG4gIH1cblxuICAvLyBDYWxjdWxhdGUgc2NvcmVzIGZvciBlYWNoIGNhdGVnb3J5XG4gIGNvbnN0IGNhdGVnb3J5U2NvcmVzID0ge31cbiAgT2JqZWN0LmVudHJpZXMoY2F0ZWdvcnlNYXBwaW5nKS5mb3JFYWNoKChbY2F0ZWdvcnksIHF1ZXN0aW9uSWRzXSkgPT4ge1xuICAgIGNvbnN0IHNjb3JlcyA9IHF1ZXN0aW9uSWRzXG4gICAgICAubWFwKChpZCkgPT4ge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHJlc3BvbnNlcy5maW5kKChyKSA9PiByLlF1ZXN0aW9uSUQgPT09IGlkKVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U/LlNjb3JlIHx8IDBcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKChzY29yZSkgPT4gc2NvcmUgPiAwKVxuXG4gICAgLy8gQ2FsY3VsYXRlIGF2ZXJhZ2Ugc2NvcmUgaWYgd2UgaGF2ZSB2YWxpZCBzY29yZXNcbiAgICBpZiAoc2NvcmVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNhdGVnb3J5U2NvcmVzW2NhdGVnb3J5XSA9IHtcbiAgICAgICAgc2NvcmU6IHBhcnNlRmxvYXQoXG4gICAgICAgICAgKFxuICAgICAgICAgICAgc2NvcmVzLnJlZHVjZSgoc3VtLCBzY29yZSkgPT4gc3VtICsgc2NvcmUsIDApIC8gc2NvcmVzLmxlbmd0aFxuICAgICAgICAgICkudG9GaXhlZCgxKVxuICAgICAgICApLFxuICAgICAgICByZXNwb25zZXM6IHNjb3JlcyxcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgLy8gRGV0ZXJtaW5lIG1hdHVyaXR5IGxldmVscyBiYXNlZCBvbiBzY29yZXNcbiAgY29uc3QgbWF0dXJpdHlMZXZlbHMgPSB7XG4gICAgXCJDbG91ZCBTdHJhdGVneVwiOiBkZXRlcm1pbmVTdHJhdGVneU1hdHVyaXR5TGV2ZWwoXG4gICAgICBjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIFN0cmF0ZWd5XCJdPy5zY29yZVxuICAgICksXG4gICAgXCJDbG91ZCBDb3N0XCI6IGRldGVybWluZUNvc3RNYXR1cml0eUxldmVsKFxuICAgICAgY2F0ZWdvcnlTY29yZXNbXCJDbG91ZCBDb3N0XCJdPy5zY29yZVxuICAgICksXG4gICAgXCJDbG91ZCBTZWN1cml0eVwiOiBkZXRlcm1pbmVTZWN1cml0eU1hdHVyaXR5TGV2ZWwoXG4gICAgICBjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIFNlY3VyaXR5XCJdPy5zY29yZVxuICAgICksXG4gICAgXCJDbG91ZCBQZW9wbGVcIjogZGV0ZXJtaW5lUGVvcGxlTWF0dXJpdHlMZXZlbChcbiAgICAgIGNhdGVnb3J5U2NvcmVzW1wiQ2xvdWQgUGVvcGxlXCJdPy5zY29yZVxuICAgICksXG4gICAgXCJDbG91ZCBEZXZPcHNcIjogZGV0ZXJtaW5lRGV2T3BzTWF0dXJpdHlMZXZlbChcbiAgICAgIGNhdGVnb3J5U2NvcmVzW1wiQ2xvdWQgRGV2T3BzXCJdPy5zY29yZVxuICAgICksXG4gIH1cblxuICAvLyBDYWxjdWxhdGUgb3ZlcmFsbCBzY29yZVxuICBjb25zdCBvdmVyYWxsU2NvcmUgPSBwYXJzZUZsb2F0KFxuICAgIChcbiAgICAgIE9iamVjdC52YWx1ZXMoY2F0ZWdvcnlTY29yZXMpLnJlZHVjZSgoc3VtLCBjYXQpID0+IHN1bSArIGNhdC5zY29yZSwgMCkgL1xuICAgICAgT2JqZWN0LnZhbHVlcyhjYXRlZ29yeVNjb3JlcykubGVuZ3RoXG4gICAgKS50b0ZpeGVkKDEpXG4gIClcblxuICAvLyBGb3JtYXQgZGF0YSBmb3IgdGhlIHJlcG9ydCBjb21wb25lbnRzXG4gIHJldHVybiBmb3JtYXRSZXBvcnREYXRhKFxuICAgIGNsaWVudEluZm8sXG4gICAgY2F0ZWdvcnlTY29yZXMsXG4gICAgbWF0dXJpdHlMZXZlbHMsXG4gICAgb3ZlcmFsbFNjb3JlXG4gIClcbn1cblxuLy8gTWF0dXJpdHkgbGV2ZWxzIGRhdGEgZm9yIHJlZmVyZW5jZVxuY29uc3QgTUFUVVJJVFlfTEVWRUxTID0gW1xuICB7XG4gICAgbGV2ZWw6IC0xLFxuICAgIHRocmVzaG9sZDogMCxcbiAgICBuYW1lOiBcIkxldmVsIC0xOiBSZWdyZXNzaXZlXCIsXG4gICAgZGVzY3JpcHRpb246IFwiUHJvY2VzcyB1bnJlcGVhdGFibGUsIHBvb3JseSBjb250cm9sbGVkIGFuZCByZWFjdGl2ZVwiLFxuICB9LFxuICB7XG4gICAgbGV2ZWw6IDAsXG4gICAgdGhyZXNob2xkOiAyLFxuICAgIG5hbWU6IFwiTGV2ZWwgMDogUmVwZWF0YWJsZVwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlByb2Nlc3MgZG9jdW1lbnRlZCBhbmQgcGFydGx5IGF1dG9tYXRlZFwiLFxuICB9LFxuICB7XG4gICAgbGV2ZWw6IDEsXG4gICAgdGhyZXNob2xkOiAzLFxuICAgIG5hbWU6IFwiTGV2ZWwgMTogQ29uc2lzdGVudFwiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJBdXRvbWF0ZWQgcHJvY2Vzc2VzIGFwcGxpZWQgYWNyb3NzIHdob2xlIGFwcGxpY2F0aW9uIGxpZmVjeWNsZVwiLFxuICB9LFxuICB7XG4gICAgbGV2ZWw6IDIsXG4gICAgdGhyZXNob2xkOiA0LFxuICAgIG5hbWU6IFwiTGV2ZWwgMjogUXVhbnRpdGF0aXZlbHkgbWFuYWdlZFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIlByb2Nlc3MgbWVhc3VyZWQgYW5kIGNvbnRyb2xsZWRcIixcbiAgfSxcbiAge1xuICAgIGxldmVsOiAzLFxuICAgIHRocmVzaG9sZDogNC41LFxuICAgIG5hbWU6IFwiTGV2ZWwgMzogT3B0aW1pemluZ1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkZvY3VzIG9uIHByb2Nlc3MgaW1wcm92ZW1lbnRzXCIsXG4gIH0sXG5dXG5cbi8qKlxuICogRGV0ZXJtaW5lcyBtYXR1cml0eSBsZXZlbCBmb3IgQ2xvdWQgU3RyYXRlZ3lcbiAqIEBwYXJhbSB7bnVtYmVyfSBzY29yZSAtIEF2ZXJhZ2Ugc2NvcmUgZm9yIENsb3VkIFN0cmF0ZWd5XG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIE1hdHVyaXR5IGxldmVsIGluZm9ybWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZVN0cmF0ZWd5TWF0dXJpdHlMZXZlbChzY29yZSkge1xuICBpZiAoIXNjb3JlKVxuICAgIHJldHVybiB7XG4gICAgICBsZXZlbDogMSxcbiAgICAgIG5hbWU6IFwiTGV2ZWwgMTogSW5pdGlhbFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQWQgaG9jIGNsb3VkIHVzYWdlIHdpdGhvdXQgYSBkZWZpbmVkIHN0cmF0ZWd5XCIsXG4gICAgfVxuICBpZiAoc2NvcmUgPCAyKVxuICAgIHJldHVybiB7XG4gICAgICBsZXZlbDogMSxcbiAgICAgIG5hbWU6IFwiTGV2ZWwgMTogSW5pdGlhbFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQWQgaG9jIGNsb3VkIHVzYWdlIHdpdGhvdXQgYSBkZWZpbmVkIHN0cmF0ZWd5XCIsXG4gICAgfVxuICBpZiAoc2NvcmUgPCAzKVxuICAgIHJldHVybiB7XG4gICAgICBsZXZlbDogMixcbiAgICAgIG5hbWU6IFwiTGV2ZWwgMjogUmVwZWF0YWJsZVwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQmFzaWMgY2xvdWQgc3RyYXRlZ3kgYWxpZ25lZCB3aXRoIHNvbWUgYnVzaW5lc3Mgb2JqZWN0aXZlc1wiLFxuICAgIH1cbiAgaWYgKHNjb3JlIDwgNClcbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6IDMsXG4gICAgICBuYW1lOiBcIkxldmVsIDM6IERlZmluZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICBcIkZvcm1hbGl6ZWQgY2xvdWQgc3RyYXRlZ3kgaW50ZWdyYXRlZCB3aXRoIGJ1c2luZXNzIHBsYW5uaW5nXCIsXG4gICAgfVxuICBpZiAoc2NvcmUgPCA0LjYpXG4gICAgcmV0dXJuIHtcbiAgICAgIGxldmVsOiA0LFxuICAgICAgbmFtZTogXCJMZXZlbCA0OiBNYW5hZ2VkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJDbG91ZCBzdHJhdGVneSBpcyByZWd1bGFybHkgcmV2aWV3ZWQgYW5kIG9wdGltaXplZFwiLFxuICAgIH1cbiAgcmV0dXJuIHtcbiAgICBsZXZlbDogNSxcbiAgICBuYW1lOiBcIkxldmVsIDU6IE9wdGltaXplZFwiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJDb250aW51b3VzIGltcHJvdmVtZW50IHdpdGggcHJvYWN0aXZlIGFsaWdubWVudCB0byBldm9sdmluZyBidXNpbmVzcyBnb2Fsc1wiLFxuICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBtYXR1cml0eSBsZXZlbCBmb3IgQ2xvdWQgQ29zdCBNYW5hZ2VtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gc2NvcmUgLSBBdmVyYWdlIHNjb3JlIGZvciBDbG91ZCBDb3N0XG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIE1hdHVyaXR5IGxldmVsIGluZm9ybWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZUNvc3RNYXR1cml0eUxldmVsKHNjb3JlKSB7XG4gIGlmICghc2NvcmUpXG4gICAgcmV0dXJuIHtcbiAgICAgIGxldmVsOiAxLFxuICAgICAgbmFtZTogXCJDcmF3bFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiTGltaXRlZCBjb3N0IHZpc2liaWxpdHkgYW5kIGNvbnRyb2xcIixcbiAgICB9XG4gIGlmIChzY29yZSA8IDIuNSlcbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6IDEsXG4gICAgICBuYW1lOiBcIkNyYXdsXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJCYXNpYyBjb3N0IHZpc2liaWxpdHkgd2l0aCBpbml0aWFsIHRhZ2dpbmcgYW5kIHJlcG9ydGluZ1wiLFxuICAgIH1cbiAgaWYgKHNjb3JlIDwgNClcbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6IDIsXG4gICAgICBuYW1lOiBcIldhbGtcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkltcHJvdmVkIGNvc3QgYWxsb2NhdGlvbiBhbmQgYnVkZ2V0aW5nIHByb2Nlc3Nlc1wiLFxuICAgIH1cbiAgcmV0dXJuIHtcbiAgICBsZXZlbDogMyxcbiAgICBuYW1lOiBcIlJ1blwiLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgXCJBZHZhbmNlZCBmb3JlY2FzdGluZywgcmVhbC10aW1lIGNvc3QgbW9uaXRvcmluZywgYW5kIHN0cmF0ZWdpYyBidXNpbmVzcyBhbGlnbm1lbnRcIixcbiAgfVxufVxuXG4vKipcbiAqIERldGVybWluZXMgbWF0dXJpdHkgbGV2ZWwgZm9yIENsb3VkIFNlY3VyaXR5XG4gKiBAcGFyYW0ge251bWJlcn0gc2NvcmUgLSBBdmVyYWdlIHNjb3JlIGZvciBDbG91ZCBTZWN1cml0eVxuICogQHJldHVybnMge29iamVjdH0gLSBNYXR1cml0eSBsZXZlbCBpbmZvcm1hdGlvblxuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVTZWN1cml0eU1hdHVyaXR5TGV2ZWwoc2NvcmUpIHtcbiAgaWYgKCFzY29yZSlcbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6IDEsXG4gICAgICBuYW1lOiBcIkxldmVsIDE6IEluaXRpYWxcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkJhc2ljIHNlY3VyaXR5IG1lYXN1cmVzIHdpdGggbGltaXRlZCBhdXRvbWF0aW9uXCIsXG4gICAgfVxuICBpZiAoc2NvcmUgPCAyKVxuICAgIHJldHVybiB7XG4gICAgICBsZXZlbDogMSxcbiAgICAgIG5hbWU6IFwiTGV2ZWwgMTogSW5pdGlhbFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQmFzaWMgc2VjdXJpdHkgbWVhc3VyZXMgd2l0aCBsaW1pdGVkIGF1dG9tYXRpb25cIixcbiAgICB9XG4gIGlmIChzY29yZSA8IDMpXG4gICAgcmV0dXJuIHtcbiAgICAgIGxldmVsOiAyLFxuICAgICAgbmFtZTogXCJMZXZlbCAyOiBNYW5hZ2VkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJJbXByb3ZlZCB2aXNpYmlsaXR5IGFuZCBzb21lIGF1dG9tYXRlZCBzZWN1cml0eSBwcm9jZXNzZXNcIixcbiAgICB9XG4gIGlmIChzY29yZSA8IDQpXG4gICAgcmV0dXJuIHtcbiAgICAgIGxldmVsOiAzLFxuICAgICAgbmFtZTogXCJMZXZlbCAzOiBEZWZpbmVkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJDb21wcmVoZW5zaXZlIHNlY3VyaXR5IHBvbGljaWVzIGFuZCBwcm9jZWR1cmVzIGluIHBsYWNlXCIsXG4gICAgfVxuICBpZiAoc2NvcmUgPCA0LjYpXG4gICAgcmV0dXJuIHtcbiAgICAgIGxldmVsOiA0LFxuICAgICAgbmFtZTogXCJMZXZlbCA0OiBRdWFudGl0YXRpdmVseSBNYW5hZ2VkXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJTZWN1cml0eSBwZXJmb3JtYW5jZSBpcyBtZWFzdXJlZCBhbmQgbWFuYWdlZFwiLFxuICAgIH1cbiAgcmV0dXJuIHtcbiAgICBsZXZlbDogNSxcbiAgICBuYW1lOiBcIkxldmVsIDU6IE9wdGltaXplZFwiLFxuICAgIGRlc2NyaXB0aW9uOiBcIkNvbnRpbnVvdXMgaW1wcm92ZW1lbnQgd2l0aCBhZGFwdGl2ZSBzZWN1cml0eSBtZWFzdXJlc1wiLFxuICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBtYXR1cml0eSBsZXZlbCBmb3IgQ2xvdWQgUGVvcGxlXG4gKiBAcGFyYW0ge251bWJlcn0gc2NvcmUgLSBBdmVyYWdlIHNjb3JlIGZvciBDbG91ZCBQZW9wbGVcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gTWF0dXJpdHkgbGV2ZWwgaW5mb3JtYXRpb25cbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lUGVvcGxlTWF0dXJpdHlMZXZlbChzY29yZSkge1xuICBpZiAoIXNjb3JlKVxuICAgIHJldHVybiB7XG4gICAgICBsZXZlbDogMSxcbiAgICAgIG5hbWU6IFwiTGV2ZWwgMTogSW5pdGlhbFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiTGltaXRlZCBjbG91ZCBleHBlcnRpc2Ugd2l0aCBhZCBob2MgdHJhaW5pbmdcIixcbiAgICB9XG4gIGlmIChzY29yZSA8IDIpXG4gICAgcmV0dXJuIHtcbiAgICAgIGxldmVsOiAxLFxuICAgICAgbmFtZTogXCJMZXZlbCAxOiBJbml0aWFsXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJMaW1pdGVkIGNsb3VkIGV4cGVydGlzZSB3aXRoIGFkIGhvYyB0cmFpbmluZ1wiLFxuICAgIH1cbiAgaWYgKHNjb3JlIDwgMylcbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6IDIsXG4gICAgICBuYW1lOiBcIkxldmVsIDI6IFJlcGVhdGFibGVcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIkJhc2ljIHRyYWluaW5nIHByb2dyYW1zIGVzdGFibGlzaGVkXCIsXG4gICAgfVxuICBpZiAoc2NvcmUgPCA0KVxuICAgIHJldHVybiB7XG4gICAgICBsZXZlbDogMyxcbiAgICAgIG5hbWU6IFwiTGV2ZWwgMzogRGVmaW5lZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiU3RydWN0dXJlZCB0cmFpbmluZyBhbmQgZGV2ZWxvcG1lbnQgcGxhbnMgaW4gcGxhY2VcIixcbiAgICB9XG4gIGlmIChzY29yZSA8IDQuNilcbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6IDQsXG4gICAgICBuYW1lOiBcIkxldmVsIDQ6IE1hbmFnZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlJlZ3VsYXIgYXNzZXNzbWVudCBhbmQgaW1wcm92ZW1lbnQgb2YgY2xvdWQgc2tpbGxzXCIsXG4gICAgfVxuICByZXR1cm4ge1xuICAgIGxldmVsOiA1LFxuICAgIG5hbWU6IFwiTGV2ZWwgNTogT3B0aW1pemVkXCIsXG4gICAgZGVzY3JpcHRpb246IFwiQ29udGludW91cyBsZWFybmluZyBjdWx0dXJlIHdpdGggYWR2YW5jZWQgc2tpbGwgZGV2ZWxvcG1lbnRcIixcbiAgfVxufVxuXG4vKipcbiAqIERldGVybWluZXMgbWF0dXJpdHkgbGV2ZWwgZm9yIENsb3VkIERldk9wc1xuICogQHBhcmFtIHtudW1iZXJ9IHNjb3JlIC0gQXZlcmFnZSBzY29yZSBmb3IgQ2xvdWQgRGV2T3BzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIE1hdHVyaXR5IGxldmVsIGluZm9ybWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZURldk9wc01hdHVyaXR5TGV2ZWwoc2NvcmUpIHtcbiAgaWYgKCFzY29yZSlcbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6IDEsXG4gICAgICBuYW1lOiBcIkxldmVsIDE6IEluaXRpYWxcIixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIk1hbnVhbCBwcm9jZXNzZXMgd2l0aCBtaW5pbWFsIGNvbGxhYm9yYXRpb25cIixcbiAgICB9XG4gIGlmIChzY29yZSA8IDIpXG4gICAgcmV0dXJuIHtcbiAgICAgIGxldmVsOiAxLFxuICAgICAgbmFtZTogXCJMZXZlbCAxOiBJbml0aWFsXCIsXG4gICAgICBkZXNjcmlwdGlvbjogXCJNYW51YWwgcHJvY2Vzc2VzIHdpdGggbWluaW1hbCBjb2xsYWJvcmF0aW9uXCIsXG4gICAgfVxuICBpZiAoc2NvcmUgPCAzKVxuICAgIHJldHVybiB7XG4gICAgICBsZXZlbDogMixcbiAgICAgIG5hbWU6IFwiTGV2ZWwgMjogTWFuYWdlZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiQmFzaWMgYXV0b21hdGlvbiBhbmQgaW1wcm92ZWQgdGVhbSBjb2xsYWJvcmF0aW9uXCIsXG4gICAgfVxuICBpZiAoc2NvcmUgPCA0KVxuICAgIHJldHVybiB7XG4gICAgICBsZXZlbDogMyxcbiAgICAgIG5hbWU6IFwiTGV2ZWwgMzogRGVmaW5lZFwiLFxuICAgICAgZGVzY3JpcHRpb246IFwiU3RhbmRhcmRpemVkIHByb2Nlc3NlcyB3aXRoIGludGVncmF0ZWQgdG9vbHNcIixcbiAgICB9XG4gIGlmIChzY29yZSA8IDQuNilcbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6IDQsXG4gICAgICBuYW1lOiBcIkxldmVsIDQ6IFF1YW50aXRhdGl2ZWx5IE1hbmFnZWRcIixcbiAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICBcIk1ldHJpY3MtZHJpdmVuIGltcHJvdmVtZW50cyBhbmQgcHJvYWN0aXZlIGluY2lkZW50IG1hbmFnZW1lbnRcIixcbiAgICB9XG4gIHJldHVybiB7XG4gICAgbGV2ZWw6IDUsXG4gICAgbmFtZTogXCJMZXZlbCA1OiBPcHRpbWl6ZWRcIixcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiRnVsbHkgYXV0b21hdGVkIHBpcGVsaW5lcyB3aXRoIGNvbnRpbnVvdXMgZGVsaXZlcnkgYW5kIGZlZWRiYWNrIGxvb3BzXCIsXG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIG92ZXJhbGwgbWF0dXJpdHkgbGV2ZWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBzY29yZSAtIE92ZXJhbGwgbWF0dXJpdHkgc2NvcmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gT3ZlcmFsbCBtYXR1cml0eSBsZXZlbCBuYW1lXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZU92ZXJhbGxNYXR1cml0eUxldmVsKHNjb3JlKSB7XG4gIGlmIChzY29yZSA8IDIpIHJldHVybiBcIkxldmVsIDE6IEluaXRpYWxcIlxuICBpZiAoc2NvcmUgPCAzKSByZXR1cm4gXCJMZXZlbCAyOiBSZXBlYXRhYmxlXCJcbiAgaWYgKHNjb3JlIDwgNCkgcmV0dXJuIFwiTGV2ZWwgMzogRGVmaW5lZFwiXG4gIGlmIChzY29yZSA8IDQuNikgcmV0dXJuIFwiTGV2ZWwgNDogTWFuYWdlZFwiXG4gIHJldHVybiBcIkxldmVsIDU6IE9wdGltaXplZFwiXG59XG5cbi8qKlxuICogRm9ybWF0cyBhc3Nlc3NtZW50IGRhdGEgZm9yIHJlcG9ydCBjb21wb25lbnRzXG4gKiBAcGFyYW0ge29iamVjdH0gY2xpZW50SW5mbyAtIENsaWVudCBpbmZvcm1hdGlvblxuICogQHBhcmFtIHtvYmplY3R9IGNhdGVnb3J5U2NvcmVzIC0gU2NvcmVzIGJ5IGNhdGVnb3J5XG4gKiBAcGFyYW0ge29iamVjdH0gbWF0dXJpdHlMZXZlbHMgLSBNYXR1cml0eSBsZXZlbHMgYnkgY2F0ZWdvcnlcbiAqIEBwYXJhbSB7bnVtYmVyfSBvdmVyYWxsU2NvcmUgLSBPdmVyYWxsIG1hdHVyaXR5IHNjb3JlXG4gKiBAcmV0dXJucyB7b2JqZWN0fSAtIEZvcm1hdHRlZCByZXBvcnQgZGF0YVxuICovXG4vLyBmdW5jdGlvbiBmb3JtYXRSZXBvcnREYXRhKFxuLy8gICBjbGllbnRJbmZvLFxuLy8gICBjYXRlZ29yeVNjb3Jlcyxcbi8vICAgbWF0dXJpdHlMZXZlbHMsXG4vLyAgIG92ZXJhbGxTY29yZVxuLy8gKSB7XG4vLyAgIC8vIENyZWF0ZSByYWRhciBjaGFydCBkYXRhIGZyb20gY2F0ZWdvcnkgc2NvcmVzXG4vLyAgIGNvbnN0IGRpbWVuc2lvbmFsU2NvcmVzID0gT2JqZWN0LmVudHJpZXMoY2F0ZWdvcnlTY29yZXMpLm1hcChcbi8vICAgICAoW2RpbWVuc2lvbiwgZGF0YV0pID0+ICh7XG4vLyAgICAgICBkaW1lbnNpb24sXG4vLyAgICAgICBzY29yZTogZGF0YS5zY29yZSxcbi8vICAgICAgIGZ1bGxNYXJrOiA1LFxuLy8gICAgIH0pXG4vLyAgIClcblxuLy8gICAvLyBHZW5lcmF0ZSByZWNvbW1lbmRhdGlvbnMgYmFzZWQgb24gc2NvcmVzIGFuZCBtYXR1cml0eSBsZXZlbHNcbi8vICAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMoXG4vLyAgICAgY2F0ZWdvcnlTY29yZXMsXG4vLyAgICAgbWF0dXJpdHlMZXZlbHNcbi8vICAgKVxuXG4vLyAgIC8vIEdlbmVyYXRlIHNob3J0LXRlcm0gZm9jdXMgYXJlYXMgYmFzZWQgb24gbG93ZXN0IHNjb3Jlc1xuLy8gICBjb25zdCBzaG9ydFRlcm1Gb2N1cyA9IGdlbmVyYXRlU2hvcnRUZXJtRm9jdXMoY2F0ZWdvcnlTY29yZXMpXG5cbi8vICAgLy8gR2VuZXJhdGUgbG9uZy10ZXJtIG9iamVjdGl2ZXNcbi8vICAgY29uc3QgbG9uZ1Rlcm1PYmplY3RpdmVzID0gZ2VuZXJhdGVMb25nVGVybU9iamVjdGl2ZXMoY2F0ZWdvcnlTY29yZXMpXG5cbi8vICAgLy8gQ2FsY3VsYXRlIHBvdGVudGlhbCBzYXZpbmdzXG4vLyAgIGNvbnN0IGFubnVhbENsb3VkU3BlbmQgPSBlc3RpbWF0ZUFubnVhbENsb3VkU3BlbmQoXG4vLyAgICAgY2xpZW50SW5mby5zaXplLFxuLy8gICAgIGNsaWVudEluZm8uaW5kdXN0cnlcbi8vICAgKVxuLy8gICBjb25zdCBwb3RlbnRpYWxTYXZpbmdzUGVyY2VudGFnZSA9IGNhbGN1bGF0ZVBvdGVudGlhbFNhdmluZ3MoY2F0ZWdvcnlTY29yZXMpXG4vLyAgIGNvbnN0IGFubnVhbFNhdmluZ3NPcHBvcnR1bml0eSA9IE1hdGgucm91bmQoXG4vLyAgICAgYW5udWFsQ2xvdWRTcGVuZCAqIHBvdGVudGlhbFNhdmluZ3NQZXJjZW50YWdlXG4vLyAgIClcblxuLy8gICAvLyBHZW5lcmF0ZSBzdW1tYXJ5IGZpbmRpbmdzXG4vLyAgIGNvbnN0IHN1bW1hcnlGaW5kaW5ncyA9IGdlbmVyYXRlU3VtbWFyeUZpbmRpbmdzKGNhdGVnb3J5U2NvcmVzKVxuXG4vLyAgIC8vIENyZWF0ZSBjbG91ZCBzcGVuZCBieSBzZXJ2aWNlIGRhdGFcbi8vICAgY29uc3QgY2xvdWRTcGVuZEJ5U2VydmljZSA9IFtcbi8vICAgICB7IG5hbWU6IFwiQ29tcHV0ZVwiLCB2YWx1ZTogTWF0aC5yb3VuZChhbm51YWxDbG91ZFNwZW5kICogMC40NSkgfSxcbi8vICAgICB7IG5hbWU6IFwiU3RvcmFnZVwiLCB2YWx1ZTogTWF0aC5yb3VuZChhbm51YWxDbG91ZFNwZW5kICogMC4yNSkgfSxcbi8vICAgICB7IG5hbWU6IFwiRGF0YWJhc2VcIiwgdmFsdWU6IE1hdGgucm91bmQoYW5udWFsQ2xvdWRTcGVuZCAqIDAuMTUpIH0sXG4vLyAgICAgeyBuYW1lOiBcIk5ldHdvcmtpbmdcIiwgdmFsdWU6IE1hdGgucm91bmQoYW5udWFsQ2xvdWRTcGVuZCAqIDAuMSkgfSxcbi8vICAgICB7IG5hbWU6IFwiT3RoZXJcIiwgdmFsdWU6IE1hdGgucm91bmQoYW5udWFsQ2xvdWRTcGVuZCAqIDAuMDUpIH0sXG4vLyAgIF1cblxuLy8gICAvLyBDcmVhdGUgdHJlbmQgZGF0YVxuLy8gICBjb25zdCB0cmVuZERhdGEgPSBbXG4vLyAgICAge1xuLy8gICAgICAgbmFtZTogXCJRMSAyMDI0XCIsXG4vLyAgICAgICBzcGVuZDogTWF0aC5yb3VuZChhbm51YWxDbG91ZFNwZW5kICogMC4yKSxcbi8vICAgICAgIHByb2plY3RlZDogTWF0aC5yb3VuZChhbm51YWxDbG91ZFNwZW5kICogMC4yKSxcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIG5hbWU6IFwiUTIgMjAyNFwiLFxuLy8gICAgICAgc3BlbmQ6IE1hdGgucm91bmQoYW5udWFsQ2xvdWRTcGVuZCAqIDAuMjIpLFxuLy8gICAgICAgcHJvamVjdGVkOiBNYXRoLnJvdW5kKGFubnVhbENsb3VkU3BlbmQgKiAwLjIxKSxcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIG5hbWU6IFwiUTMgMjAyNFwiLFxuLy8gICAgICAgc3BlbmQ6IE1hdGgucm91bmQoYW5udWFsQ2xvdWRTcGVuZCAqIDAuMjgpLFxuLy8gICAgICAgcHJvamVjdGVkOiBNYXRoLnJvdW5kKGFubnVhbENsb3VkU3BlbmQgKiAwLjI3KSxcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIG5hbWU6IFwiUTQgMjAyNFwiLFxuLy8gICAgICAgc3BlbmQ6IE1hdGgucm91bmQoYW5udWFsQ2xvdWRTcGVuZCAqIDAuMyksXG4vLyAgICAgICBwcm9qZWN0ZWQ6IE1hdGgucm91bmQoYW5udWFsQ2xvdWRTcGVuZCAqIDAuMjkpLFxuLy8gICAgIH0sXG4vLyAgICAge1xuLy8gICAgICAgbmFtZTogXCJRMSAyMDI1XCIsXG4vLyAgICAgICBzcGVuZDogbnVsbCxcbi8vICAgICAgIHByb2plY3RlZDogTWF0aC5yb3VuZChhbm51YWxDbG91ZFNwZW5kICogMC4yNSksXG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBuYW1lOiBcIlEyIDIwMjVcIixcbi8vICAgICAgIHNwZW5kOiBudWxsLFxuLy8gICAgICAgcHJvamVjdGVkOiBNYXRoLnJvdW5kKGFubnVhbENsb3VkU3BlbmQgKiAwLjIyKSxcbi8vICAgICB9LFxuLy8gICBdXG5cbi8vICAgLy8gUHJhY3RpY2UgYXJlYXMgZm9yIG1hdHVyaXR5IHRhYmxlXG4vLyAgIGNvbnN0IHByYWN0aWNlQXJlYXMgPSBbXG4vLyAgICAge1xuLy8gICAgICAgaWQ6IFwiYnVpbGRNYW5hZ2VtZW50XCIsXG4vLyAgICAgICBuYW1lOiBcIkJ1aWxkIG1hbmFnZW1lbnQgYW5kIENJXCIsXG4vLyAgICAgICBjdXJyZW50TGV2ZWw6IGRldGVybWluZVByYWN0aWNlTGV2ZWwoY2F0ZWdvcnlTY29yZXMsIFwiQ2xvdWQgRGV2T3BzXCIpLFxuLy8gICAgICAgdGFyZ2V0TGV2ZWw6IE1hdGgubWluKFxuLy8gICAgICAgICBkZXRlcm1pbmVQcmFjdGljZUxldmVsKGNhdGVnb3J5U2NvcmVzLCBcIkNsb3VkIERldk9wc1wiKSArIDEsXG4vLyAgICAgICAgIDNcbi8vICAgICAgICksXG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBpZDogXCJlbnZpcm9ubWVudFwiLFxuLy8gICAgICAgbmFtZTogXCJFbnZpcm9ubWVudCBhbmQgZGVwbG95bWVudHNcIixcbi8vICAgICAgIGN1cnJlbnRMZXZlbDogZGV0ZXJtaW5lUHJhY3RpY2VMZXZlbChjYXRlZ29yeVNjb3JlcywgXCJDbG91ZCBEZXZPcHNcIiksXG4vLyAgICAgICB0YXJnZXRMZXZlbDogTWF0aC5taW4oXG4vLyAgICAgICAgIGRldGVybWluZVByYWN0aWNlTGV2ZWwoY2F0ZWdvcnlTY29yZXMsIFwiQ2xvdWQgRGV2T3BzXCIpICsgMSxcbi8vICAgICAgICAgM1xuLy8gICAgICAgKSxcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIGlkOiBcInJlbGVhc2VcIixcbi8vICAgICAgIG5hbWU6IFwiUmVsZWFzZSBtYW5hZ2VtZW50XCIsXG4vLyAgICAgICBjdXJyZW50TGV2ZWw6IGRldGVybWluZVByYWN0aWNlTGV2ZWwoY2F0ZWdvcnlTY29yZXMsIFwiQ2xvdWQgRGV2T3BzXCIpLFxuLy8gICAgICAgdGFyZ2V0TGV2ZWw6IE1hdGgubWluKFxuLy8gICAgICAgICBkZXRlcm1pbmVQcmFjdGljZUxldmVsKGNhdGVnb3J5U2NvcmVzLCBcIkNsb3VkIERldk9wc1wiKSArIDEsXG4vLyAgICAgICAgIDNcbi8vICAgICAgICksXG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBpZDogXCJ0ZXN0aW5nXCIsXG4vLyAgICAgICBuYW1lOiBcIlRlc3RpbmdcIixcbi8vICAgICAgIGN1cnJlbnRMZXZlbDogTWF0aC5tYXgoXG4vLyAgICAgICAgIGRldGVybWluZVByYWN0aWNlTGV2ZWwoY2F0ZWdvcnlTY29yZXMsIFwiQ2xvdWQgRGV2T3BzXCIpIC0gMSxcbi8vICAgICAgICAgLTFcbi8vICAgICAgICksXG4vLyAgICAgICB0YXJnZXRMZXZlbDogTWF0aC5taW4oXG4vLyAgICAgICAgIGRldGVybWluZVByYWN0aWNlTGV2ZWwoY2F0ZWdvcnlTY29yZXMsIFwiQ2xvdWQgRGV2T3BzXCIpICsgMSxcbi8vICAgICAgICAgM1xuLy8gICAgICAgKSxcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIGlkOiBcImRhdGFNYW5hZ2VtZW50XCIsXG4vLyAgICAgICBuYW1lOiBcIkRhdGEgTWFuYWdlbWVudFwiLFxuLy8gICAgICAgY3VycmVudExldmVsOiBkZXRlcm1pbmVQcmFjdGljZUxldmVsKGNhdGVnb3J5U2NvcmVzLCBcIkNsb3VkIFN0cmF0ZWd5XCIpLFxuLy8gICAgICAgdGFyZ2V0TGV2ZWw6IE1hdGgubWluKFxuLy8gICAgICAgICBkZXRlcm1pbmVQcmFjdGljZUxldmVsKGNhdGVnb3J5U2NvcmVzLCBcIkNsb3VkIFN0cmF0ZWd5XCIpICsgMSxcbi8vICAgICAgICAgM1xuLy8gICAgICAgKSxcbi8vICAgICB9LFxuLy8gICBdXG5cbi8vICAgLy8gSW1wbGVtZW50YXRpb24gcm9hZG1hcCBwaGFzZXNcbi8vICAgY29uc3QgaW1wbGVtZW50YXRpb25Sb2FkbWFwID0gW1xuLy8gICAgIHtcbi8vICAgICAgIHBoYXNlOiBcIkltbWVkaWF0ZSAoMC0zMCBkYXlzKVwiLFxuLy8gICAgICAgYWN0aW9uczogW1xuLy8gICAgICAgICBcIkltcGxlbWVudCBhdXRvbWF0ZWQgaW5zdGFuY2Ugc2NoZWR1bGluZ1wiLFxuLy8gICAgICAgICBcIlN0YW5kYXJkaXplIHJlc291cmNlIHRhZ2dpbmdcIixcbi8vICAgICAgIF0sXG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwaGFzZTogXCJTaG9ydC10ZXJtICgxLTMgbW9udGhzKVwiLFxuLy8gICAgICAgYWN0aW9uczogW1xuLy8gICAgICAgICBcIlJpZ2h0LXNpemUgb3ZlcnNpemVkIGluc3RhbmNlc1wiLFxuLy8gICAgICAgICBcIkltcGxlbWVudCBTMyBsaWZlY3ljbGUgcG9saWNpZXNcIixcbi8vICAgICAgIF0sXG4vLyAgICAgfSxcbi8vICAgICB7XG4vLyAgICAgICBwaGFzZTogXCJNZWRpdW0tdGVybSAoMy02IG1vbnRocylcIixcbi8vICAgICAgIGFjdGlvbnM6IFtcIkV4cGFuZCBJYUMgY292ZXJhZ2VcIiwgXCJJbXBsZW1lbnQgY29zdCBhbm9tYWx5IGRldGVjdGlvblwiXSxcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgIHBoYXNlOiBcIkxvbmctdGVybSAoNi0xMiBtb250aHMpXCIsXG4vLyAgICAgICBhY3Rpb25zOiBbXG4vLyAgICAgICAgIFwiSW1wbGVtZW50IEZpbk9wcyBwcmFjdGljZXNcIixcbi8vICAgICAgICAgXCJDb250YWluZXIgb3JjaGVzdHJhdGlvbiBzdHJhdGVneVwiLFxuLy8gICAgICAgXSxcbi8vICAgICB9LFxuLy8gICBdXG5cbi8vICAgLy8gUmV0dXJuIHRoZSBjb21wbGV0ZSBkYXRhIG9iamVjdCBleHBlY3RlZCBieSByZXBvcnQgY29tcG9uZW50c1xuLy8gICByZXR1cm4ge1xuLy8gICAgIHJlcG9ydE1ldGFkYXRhOiB7XG4vLyAgICAgICBvcmdhbml6YXRpb25OYW1lOiBjbGllbnRJbmZvLmJ1c2luZXNzLFxuLy8gICAgICAgY2xpZW50TmFtZTogY2xpZW50SW5mby5uYW1lLFxuLy8gICAgICAgY2xpZW50RW1haWw6IGNsaWVudEluZm8uZW1haWwsXG4vLyAgICAgICBjbGllbnRTaXplOiBjbGllbnRJbmZvLnNpemUsXG4vLyAgICAgICBjbGllbnRJbmR1c3RyeTogY2xpZW50SW5mby5pbmR1c3RyeSxcbi8vICAgICAgIHJlcG9ydERhdGU6IG5ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKFwiZW4tVVNcIiwge1xuLy8gICAgICAgICB5ZWFyOiBcIm51bWVyaWNcIixcbi8vICAgICAgICAgbW9udGg6IFwibG9uZ1wiLFxuLy8gICAgICAgICBkYXk6IFwibnVtZXJpY1wiLFxuLy8gICAgICAgfSksXG4vLyAgICAgICByZXBvcnRQZXJpb2Q6IGBRJHtNYXRoLmNlaWwoXG4vLyAgICAgICAgIChuZXcgRGF0ZSgpLmdldE1vbnRoKCkgKyAxKSAvIDNcbi8vICAgICAgICl9ICR7bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfWAsXG4vLyAgICAgfSxcbi8vICAgICBleGVjdXRpdmVTdW1tYXJ5OiB7XG4vLyAgICAgICBzZWN0aW9uVGl0bGU6IFwiRXhlY3V0aXZlIFN1bW1hcnlcIixcbi8vICAgICAgIHN1YnRvcGljczogW1xuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgdGl0bGU6IFwiT3ZlcnZpZXdcIixcbi8vICAgICAgICAgICBjb250ZW50OiBgVGhpcyByZXBvcnQgcHJlc2VudHMgYSBjb21wcmVoZW5zaXZlIGFzc2Vzc21lbnQgb2YgJHtjbGllbnRJbmZvLmJ1c2luZXNzfSdzIGNsb3VkIGluZnJhc3RydWN0dXJlIGFuZCBwcmFjdGljZXMuIE91ciBBSS1wb3dlcmVkIGFuYWx5c2lzIGV4YW1pbmVkIHlvdXIgb3JnYW5pemF0aW9uJ3MgY2xvdWQgbWF0dXJpdHkgYWNyb3NzIGtleSBkaW1lbnNpb25zIGFuZCBpZGVudGlmaWVkIG9wdGltaXphdGlvbiBvcHBvcnR1bml0aWVzLmAsXG4vLyAgICAgICAgIH0sXG4vLyAgICAgICAgIHtcbi8vICAgICAgICAgICB0aXRsZTogXCJQdXJwb3NlXCIsXG4vLyAgICAgICAgICAgY29udGVudDpcbi8vICAgICAgICAgICAgIFwiVGhpcyBhc3Nlc3NtZW50IGFpbXMgdG8gaGVscCB5b3Ugb3B0aW1pemUgY2xvdWQgY29zdHMsIGltcHJvdmUgb3BlcmF0aW9uYWwgZWZmaWNpZW5jeSwgYW5kIGFsaWduIGNsb3VkIGluZnJhc3RydWN0dXJlIHdpdGggYnVzaW5lc3Mgb2JqZWN0aXZlcyB0aHJvdWdoIGRhdGEtZHJpdmVuIHJlY29tbWVuZGF0aW9ucy5cIixcbi8vICAgICAgICAgfSxcbi8vICAgICAgICAge1xuLy8gICAgICAgICAgIHRpdGxlOiBcIk1ldGhvZG9sb2d5XCIsXG4vLyAgICAgICAgICAgY29udGVudDpcbi8vICAgICAgICAgICAgIFwiV2UgYW5hbHl6ZWQgeW91ciByZXNwb25zZXMgdXNpbmcgYSBwcm9wcmlldGFyeSBhbGdvcml0aG0gdGhhdCBjb21wYXJlcyB5b3VyIHByYWN0aWNlcyBhZ2FpbnN0IGluZHVzdHJ5IGJlbmNobWFya3MgYW5kIGlkZW50aWZpZXMgb3B0aW1pemF0aW9uIG9wcG9ydHVuaXRpZXMgYmFzZWQgb24gcHJvdmVuIGJlc3QgcHJhY3RpY2VzLlwiLFxuLy8gICAgICAgICB9LFxuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgdGl0bGU6IFwiS2V5IEZvY3VzZXNcIixcbi8vICAgICAgICAgICBjb250ZW50OiBbXG4vLyAgICAgICAgICAgICBcIkNsb3VkIGNvc3Qgb3B0aW1pemF0aW9uIGFjcm9zcyBhbGwgc2VydmljZSBjYXRlZ29yaWVzXCIsXG4vLyAgICAgICAgICAgICBcIkluZnJhc3RydWN0dXJlIGFzIENvZGUgKElhQykgaW1wbGVtZW50YXRpb24gYW5kIGltcHJvdmVtZW50XCIsXG4vLyAgICAgICAgICAgICBcIlJlc291cmNlIHJpZ2h0LXNpemluZyBhbmQgZWxpbWluYXRpb24gb2Ygd2FzdGVcIixcbi8vICAgICAgICAgICAgIFwiR292ZXJuYW5jZSBhbmQgb3BlcmF0aW9uYWwgZWZmaWNpZW5jeVwiLFxuLy8gICAgICAgICAgIF0sXG4vLyAgICAgICAgIH0sXG4vLyAgICAgICAgIHtcbi8vICAgICAgICAgICB0aXRsZTogXCJTdW1tYXJ5IG9mIEZpbmRpbmdzXCIsXG4vLyAgICAgICAgICAgY29udGVudDogc3VtbWFyeUZpbmRpbmdzLFxuLy8gICAgICAgICB9LFxuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgdGl0bGU6IFwiS2V5IFJlY29tbWVuZGF0aW9uc1wiLFxuLy8gICAgICAgICAgIGNvbnRlbnQ6IHJlY29tbWVuZGF0aW9ucy5zbGljZSgwLCA0KS5tYXAoKHJlYykgPT4gcmVjLnRpdGxlKSxcbi8vICAgICAgICAgfSxcbi8vICAgICAgICAge1xuLy8gICAgICAgICAgIHRpdGxlOiBcIkV4cGVjdGVkIEltcGFjdFwiLFxuLy8gICAgICAgICAgIGNvbnRlbnQ6IGBJbXBsZW1lbnRhdGlvbiBvZiBvdXIgcmVjb21tZW5kYXRpb25zIGNvdWxkIHJlZHVjZSB5b3VyIGFubnVhbCBjbG91ZCBzcGVuZCBieSBhcHByb3hpbWF0ZWx5ICR7TWF0aC5yb3VuZChcbi8vICAgICAgICAgICAgIHBvdGVudGlhbFNhdmluZ3NQZXJjZW50YWdlICogMTAwXG4vLyAgICAgICAgICAgKX0lLCByZXN1bHRpbmcgaW4gcG90ZW50aWFsIHNhdmluZ3Mgb2YgJCR7YW5udWFsU2F2aW5nc09wcG9ydHVuaXR5LnRvTG9jYWxlU3RyaW5nKCl9IHBlciB5ZWFyIHdoaWxlIGltcHJvdmluZyBwZXJmb3JtYW5jZSBhbmQgc2VjdXJpdHkuYCxcbi8vICAgICAgICAgfSxcbi8vICAgICAgIF0sXG4vLyAgICAgfSxcbi8vICAgICBjbG91ZFNwZW5kOiB7XG4vLyAgICAgICB0b3RhbDogYW5udWFsQ2xvdWRTcGVuZCxcbi8vICAgICAgIGFubnVhbFNhdmluZ3NPcHBvcnR1bml0eTogYW5udWFsU2F2aW5nc09wcG9ydHVuaXR5LFxuLy8gICAgICAgYnlTZXJ2aWNlOiBjbG91ZFNwZW5kQnlTZXJ2aWNlLFxuLy8gICAgICAgdHJlbmRzOiB0cmVuZERhdGEsXG4vLyAgICAgfSxcbi8vICAgICBjbG91ZE1hdHVyaXR5QXNzZXNzbWVudDoge1xuLy8gICAgICAgc2VjdGlvblRpdGxlOiBcIkNsb3VkIE1hdHVyaXR5IEFzc2Vzc21lbnRcIixcbi8vICAgICAgIG92ZXJhbGxTY29yZTogb3ZlcmFsbFNjb3JlLFxuLy8gICAgICAgY3VycmVudExldmVsOiBkZXRlcm1pbmVPdmVyYWxsTWF0dXJpdHlMZXZlbChvdmVyYWxsU2NvcmUpLFxuLy8gICAgICAgbWF0dXJpdHlMZXZlbHM6IE1BVFVSSVRZX0xFVkVMUyxcbi8vICAgICAgIHN1YnRvcGljczogW1xuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgdGl0bGU6IFwiVW5kZXJzdGFuZGluZyBDbG91ZCBNYXR1cml0eVwiLFxuLy8gICAgICAgICAgIGNvbnRlbnQ6XG4vLyAgICAgICAgICAgICBcIkNsb3VkIG1hdHVyaXR5IG1lYXN1cmVzIGhvdyBlZmZlY3RpdmVseSBhbiBvcmdhbml6YXRpb24gYWRvcHRzLCBtYW5hZ2VzLCBhbmQgb3B0aW1pemVzIGNsb3VkIHJlc291cmNlcyBhbmQgcHJhY3RpY2VzLiBIaWdoZXIgbWF0dXJpdHkgY29ycmVsYXRlcyB3aXRoIGJldHRlciBlZmZpY2llbmN5LCBzZWN1cml0eSwgYW5kIGNvc3Qgb3B0aW1pemF0aW9uLlwiLFxuLy8gICAgICAgICB9LFxuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgdGl0bGU6IFwiQ3VycmVudCBDbG91ZCBNYXR1cml0eSBMZXZlbFwiLFxuLy8gICAgICAgICAgIGNvbnRlbnQ6IGBXaXRoIGFuIG92ZXJhbGwgc2NvcmUgb2YgJHtvdmVyYWxsU2NvcmUudG9GaXhlZChcbi8vICAgICAgICAgICAgIDFcbi8vICAgICAgICAgICApfS81LjAsIHlvdXIgb3JnYW5pemF0aW9uIGlzIGF0ICR7ZGV0ZXJtaW5lT3ZlcmFsbE1hdHVyaXR5TGV2ZWwoXG4vLyAgICAgICAgICAgICBvdmVyYWxsU2NvcmVcbi8vICAgICAgICAgICApfS4gVGhpcyBpbmRpY2F0ZXMgJHtpbnRlcnByZXRNYXR1cml0eUxldmVsKG92ZXJhbGxTY29yZSl9LmAsXG4vLyAgICAgICAgIH0sXG4vLyAgICAgICAgIHtcbi8vICAgICAgICAgICB0aXRsZTogXCJEaW1lbnNpb25hbCBBbmFseXNpc1wiLFxuLy8gICAgICAgICAgIGNvbnRlbnQ6XG4vLyAgICAgICAgICAgICBcIlRoZSByYWRhciBjaGFydCBzaG93cyB5b3VyIG9yZ2FuaXphdGlvbidzIHBlcmZvcm1hbmNlIGFjcm9zcyBzaXggY3JpdGljYWwgY2xvdWQgZGltZW5zaW9ucy4gQXJlYXMgY2xvc2VyIHRvIHRoZSBjZW50ZXIgcmVwcmVzZW50IG9wcG9ydHVuaXRpZXMgZm9yIGltcHJvdmVtZW50LlwiLFxuLy8gICAgICAgICAgIGRpbWVuc2lvbmFsU2NvcmVzOiBkaW1lbnNpb25hbFNjb3Jlcyxcbi8vICAgICAgICAgfSxcbi8vICAgICAgICAge1xuLy8gICAgICAgICAgIHRpdGxlOiBcIkdyb3d0aCBUcmFqZWN0b3J5ICYgUmVjb21tZW5kYXRpb25zXCIsXG4vLyAgICAgICAgICAgY29udGVudDpcbi8vICAgICAgICAgICAgIFwiQmFzZWQgb24geW91ciBhc3Nlc3NtZW50IHJlc3VsdHMsIHdlJ3ZlIGlkZW50aWZpZWQgc3BlY2lmaWMgZm9jdXMgYXJlYXMgdG8gaGVscCBhZHZhbmNlIHlvdXIgY2xvdWQgbWF0dXJpdHkgdG8gdGhlIG5leHQgbGV2ZWwuXCIsXG4vLyAgICAgICAgICAgc2hvcnRUZXJtRm9jdXM6IHNob3J0VGVybUZvY3VzLFxuLy8gICAgICAgICAgIGxvbmdUZXJtT2JqZWN0aXZlczogbG9uZ1Rlcm1PYmplY3RpdmVzLFxuLy8gICAgICAgICB9LFxuLy8gICAgICAgXSxcbi8vICAgICAgIHByYWN0aWNlQXJlYXM6IHByYWN0aWNlQXJlYXMsXG4vLyAgICAgICBkZXNjcmlwdGlvbjpcbi8vICAgICAgICAgXCJUaGlzIG1hdHVyaXR5IGFzc2Vzc21lbnQgc2hvd3MgeW91ciBjdXJyZW50IHBvc2l0aW9uIGFuZCB0YXJnZXQgc3RhdGUgYWNyb3NzIGtleSBEZXZPcHMgYW5kIGNsb3VkIHByYWN0aWNlcy5cIixcbi8vICAgICB9LFxuLy8gICAgIHJlY29tbWVuZGF0aW9uczoge1xuLy8gICAgICAgc2VjdGlvblRpdGxlOiBcIlJlY29tbWVuZGF0aW9ucyAmIEFjdGlvbiBQbGFuXCIsXG4vLyAgICAgICBrZXlSZWNvbW1lbmRhdGlvbnM6IHJlY29tbWVuZGF0aW9ucyxcbi8vICAgICAgIGV4cGVjdGVkSW1wYWN0OiB7XG4vLyAgICAgICAgIGFubnVhbFNhdmluZ3M6IGFubnVhbFNhdmluZ3NPcHBvcnR1bml0eSxcbi8vICAgICAgICAgcm9pUGVyY2VudGFnZTogMzUwLFxuLy8gICAgICAgICBhZGRpdGlvbmFsQmVuZWZpdHM6XG4vLyAgICAgICAgICAgXCJCZXlvbmQgY29zdCBzYXZpbmdzLCB0aGVzZSByZWNvbW1lbmRhdGlvbnMgd2lsbCBpbXByb3ZlIHNlY3VyaXR5IHBvc3R1cmUsIHJlZHVjZSBvcGVyYXRpb25hbCBvdmVyaGVhZCwgYW5kIGluY3JlYXNlIGRldmVsb3BtZW50IHZlbG9jaXR5LlwiLFxuLy8gICAgICAgfSxcbi8vICAgICAgIGltcGxlbWVudGF0aW9uUm9hZG1hcDogaW1wbGVtZW50YXRpb25Sb2FkbWFwLFxuLy8gICAgICAgbmV4dFN0ZXBzOiBbXG4vLyAgICAgICAgIFwiU2NoZWR1bGUgaW1wbGVtZW50YXRpb24gcGxhbm5pbmcgc2Vzc2lvbiB3aXRoIE1ha2VTdHVmZkdvIHRlYW1cIixcbi8vICAgICAgICAgXCJJZGVudGlmeSBpbnRlcm5hbCBzdGFrZWhvbGRlcnMgZm9yIGVhY2ggcmVjb21tZW5kYXRpb24gYXJlYVwiLFxuLy8gICAgICAgICBcIkVzdGFibGlzaCBwcm9ncmVzcyB0cmFja2luZyBtZXRyaWNzXCIsXG4vLyAgICAgICAgIFwiU2V0IHVwIGJpLXdlZWtseSBwcm9ncmVzcyByZXZpZXdzXCIsXG4vLyAgICAgICBdLFxuLy8gICAgIH0sXG4vLyAgIH1cbi8vIH1cbmZ1bmN0aW9uIGZvcm1hdFJlcG9ydERhdGEoXG4gIGNsaWVudEluZm8sXG4gIGNhdGVnb3J5U2NvcmVzLFxuICBtYXR1cml0eUxldmVscyxcbiAgb3ZlcmFsbFNjb3JlXG4pIHtcbiAgLy8gQ3JlYXRlIHJhZGFyIGNoYXJ0IGRhdGEgZm9yIG1hdHVyaXR5IGRpbWVuc2lvbnNcbiAgY29uc3QgZGltZW5zaW9uYWxTY29yZXMgPSBPYmplY3QuZW50cmllcyhjYXRlZ29yeVNjb3JlcykubWFwKFxuICAgIChbZGltZW5zaW9uLCBkYXRhXSkgPT4gKHtcbiAgICAgIGRpbWVuc2lvbixcbiAgICAgIHNjb3JlOiBkYXRhLnNjb3JlLFxuICAgICAgZnVsbE1hcms6IDUsXG4gICAgfSlcbiAgKVxuXG4gIC8vIFByYWN0aWNlIGFyZWFzIGZvciBtYXR1cml0eSB0YWJsZVxuICBjb25zdCBwcmFjdGljZUFyZWFzID0gW1xuICAgIHtcbiAgICAgIGlkOiBcImJ1aWxkTWFuYWdlbWVudFwiLFxuICAgICAgbmFtZTogXCJCdWlsZCBtYW5hZ2VtZW50IGFuZCBDSVwiLFxuICAgICAgY3VycmVudExldmVsOiBkZXRlcm1pbmVQcmFjdGljZUxldmVsKGNhdGVnb3J5U2NvcmVzLCBcIkNsb3VkIERldk9wc1wiKSxcbiAgICAgIHRhcmdldExldmVsOiBNYXRoLm1pbihcbiAgICAgICAgZGV0ZXJtaW5lUHJhY3RpY2VMZXZlbChjYXRlZ29yeVNjb3JlcywgXCJDbG91ZCBEZXZPcHNcIikgKyAxLFxuICAgICAgICAzXG4gICAgICApLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IFwiZW52aXJvbm1lbnRcIixcbiAgICAgIG5hbWU6IFwiRW52aXJvbm1lbnQgYW5kIGRlcGxveW1lbnRzXCIsXG4gICAgICBjdXJyZW50TGV2ZWw6IGRldGVybWluZVByYWN0aWNlTGV2ZWwoY2F0ZWdvcnlTY29yZXMsIFwiQ2xvdWQgRGV2T3BzXCIpLFxuICAgICAgdGFyZ2V0TGV2ZWw6IE1hdGgubWluKFxuICAgICAgICBkZXRlcm1pbmVQcmFjdGljZUxldmVsKGNhdGVnb3J5U2NvcmVzLCBcIkNsb3VkIERldk9wc1wiKSArIDEsXG4gICAgICAgIDNcbiAgICAgICksXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogXCJyZWxlYXNlXCIsXG4gICAgICBuYW1lOiBcIlJlbGVhc2UgbWFuYWdlbWVudFwiLFxuICAgICAgY3VycmVudExldmVsOiBkZXRlcm1pbmVQcmFjdGljZUxldmVsKGNhdGVnb3J5U2NvcmVzLCBcIkNsb3VkIERldk9wc1wiKSxcbiAgICAgIHRhcmdldExldmVsOiBNYXRoLm1pbihcbiAgICAgICAgZGV0ZXJtaW5lUHJhY3RpY2VMZXZlbChjYXRlZ29yeVNjb3JlcywgXCJDbG91ZCBEZXZPcHNcIikgKyAxLFxuICAgICAgICAzXG4gICAgICApLFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IFwidGVzdGluZ1wiLFxuICAgICAgbmFtZTogXCJUZXN0aW5nXCIsXG4gICAgICBjdXJyZW50TGV2ZWw6IE1hdGgubWF4KFxuICAgICAgICBkZXRlcm1pbmVQcmFjdGljZUxldmVsKGNhdGVnb3J5U2NvcmVzLCBcIkNsb3VkIERldk9wc1wiKSAtIDEsXG4gICAgICAgIC0xXG4gICAgICApLFxuICAgICAgdGFyZ2V0TGV2ZWw6IE1hdGgubWluKFxuICAgICAgICBkZXRlcm1pbmVQcmFjdGljZUxldmVsKGNhdGVnb3J5U2NvcmVzLCBcIkNsb3VkIERldk9wc1wiKSArIDEsXG4gICAgICAgIDNcbiAgICAgICksXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogXCJkYXRhTWFuYWdlbWVudFwiLFxuICAgICAgbmFtZTogXCJEYXRhIE1hbmFnZW1lbnRcIixcbiAgICAgIGN1cnJlbnRMZXZlbDogZGV0ZXJtaW5lUHJhY3RpY2VMZXZlbChjYXRlZ29yeVNjb3JlcywgXCJDbG91ZCBTdHJhdGVneVwiKSxcbiAgICAgIHRhcmdldExldmVsOiBNYXRoLm1pbihcbiAgICAgICAgZGV0ZXJtaW5lUHJhY3RpY2VMZXZlbChjYXRlZ29yeVNjb3JlcywgXCJDbG91ZCBTdHJhdGVneVwiKSArIDEsXG4gICAgICAgIDNcbiAgICAgICksXG4gICAgfSxcbiAgXVxuXG4gIC8vIEdlbmVyYXRlIG5lY2Vzc2FyeSBzZWN0aW9uc1xuICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBnZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyhcbiAgICBjYXRlZ29yeVNjb3JlcyxcbiAgICBtYXR1cml0eUxldmVsc1xuICApXG4gIGNvbnN0IHNob3J0VGVybUZvY3VzID0gZ2VuZXJhdGVTaG9ydFRlcm1Gb2N1cyhjYXRlZ29yeVNjb3JlcylcbiAgY29uc3QgbG9uZ1Rlcm1PYmplY3RpdmVzID0gZ2VuZXJhdGVMb25nVGVybU9iamVjdGl2ZXMoY2F0ZWdvcnlTY29yZXMpXG4gIGNvbnN0IHN1bW1hcnlGaW5kaW5ncyA9IGdlbmVyYXRlU3VtbWFyeUZpbmRpbmdzKGNhdGVnb3J5U2NvcmVzKVxuXG4gIHJldHVybiB7XG4gICAgcmVwb3J0TWV0YWRhdGE6IHtcbiAgICAgIG9yZ2FuaXphdGlvbk5hbWU6IGNsaWVudEluZm8uYnVzaW5lc3MsXG4gICAgICBjbGllbnROYW1lOiBjbGllbnRJbmZvLm5hbWUsXG4gICAgICBjbGllbnRFbWFpbDogY2xpZW50SW5mby5lbWFpbCxcbiAgICAgIGNsaWVudFNpemU6IGNsaWVudEluZm8uc2l6ZSxcbiAgICAgIGNsaWVudEluZHVzdHJ5OiBjbGllbnRJbmZvLmluZHVzdHJ5LFxuICAgICAgcmVwb3J0RGF0ZTogbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoXCJlbi1VU1wiLCB7XG4gICAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgICBtb250aDogXCJsb25nXCIsXG4gICAgICAgIGRheTogXCJudW1lcmljXCIsXG4gICAgICB9KSxcbiAgICAgIHJlcG9ydFBlcmlvZDogYFEke01hdGguY2VpbChcbiAgICAgICAgKG5ldyBEYXRlKCkuZ2V0TW9udGgoKSArIDEpIC8gM1xuICAgICAgKX0gJHtuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCl9YCxcbiAgICB9LFxuICAgIGV4ZWN1dGl2ZVN1bW1hcnk6IHtcbiAgICAgIHNlY3Rpb25UaXRsZTogXCJFeGVjdXRpdmUgU3VtbWFyeVwiLFxuICAgICAgc3VidG9waWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogXCJPdmVydmlld1wiLFxuICAgICAgICAgIGNvbnRlbnQ6IGBUaGlzIHJlcG9ydCBwcmVzZW50cyBhbiBvdmVydmlldyBvZiAke2NsaWVudEluZm8uYnVzaW5lc3N9J3MgY2xvdWQgaW5mcmFzdHJ1Y3R1cmUgbWF0dXJpdHkuYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBcIlB1cnBvc2VcIixcbiAgICAgICAgICBjb250ZW50OlxuICAgICAgICAgICAgXCJUbyBhc3Nlc3MgYW5kIHJlY29tbWVuZCBpbXByb3ZlbWVudHMgZm9yIGNsb3VkIHByYWN0aWNlcyBhbmQgbWF0dXJpdHkuXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogXCJNZXRob2RvbG9neVwiLFxuICAgICAgICAgIGNvbnRlbnQ6XG4gICAgICAgICAgICBcIkFzc2Vzc21lbnQgcmVzcG9uc2VzIGFuYWx5emVkIGFnYWluc3QgaW5kdXN0cnkgc3RhbmRhcmRzIHRvIGlkZW50aWZ5IGdhcHMgYW5kIG9wcG9ydHVuaXRpZXMuXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogXCJLZXkgRm9jdXNlc1wiLFxuICAgICAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAgICAgIFwiQ2xvdWQgY29zdCBvcHRpbWl6YXRpb25cIixcbiAgICAgICAgICAgIFwiSW5mcmFzdHJ1Y3R1cmUgYXMgQ29kZSAoSWFDKSBwcmFjdGljZXNcIixcbiAgICAgICAgICAgIFwiQXV0b21hdGlvbiBhbmQgRGV2T3BzIGltcHJvdmVtZW50c1wiLFxuICAgICAgICAgICAgXCJHb3Zlcm5hbmNlIGFuZCBvcGVyYXRpb25hbCBleGNlbGxlbmNlXCIsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBcIlN1bW1hcnkgb2YgRmluZGluZ3NcIixcbiAgICAgICAgICBjb250ZW50OiBzdW1tYXJ5RmluZGluZ3MsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogXCJLZXkgUmVjb21tZW5kYXRpb25zXCIsXG4gICAgICAgICAgY29udGVudDogcmVjb21tZW5kYXRpb25zLnNsaWNlKDAsIDQpLm1hcCgocmVjKSA9PiByZWMudGl0bGUpLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIGNsb3VkTWF0dXJpdHlBc3Nlc3NtZW50OiB7XG4gICAgICBzZWN0aW9uVGl0bGU6IFwiQ2xvdWQgTWF0dXJpdHkgQXNzZXNzbWVudFwiLFxuICAgICAgb3ZlcmFsbFNjb3JlOiBvdmVyYWxsU2NvcmUsXG4gICAgICBjdXJyZW50TGV2ZWw6IGRldGVybWluZU92ZXJhbGxNYXR1cml0eUxldmVsKG92ZXJhbGxTY29yZSksXG4gICAgICBtYXR1cml0eUxldmVsczogTUFUVVJJVFlfTEVWRUxTLFxuICAgICAgc3VidG9waWNzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogXCJVbmRlcnN0YW5kaW5nIENsb3VkIE1hdHVyaXR5XCIsXG4gICAgICAgICAgY29udGVudDpcbiAgICAgICAgICAgIFwiQ2xvdWQgbWF0dXJpdHkgbWVhc3VyZXMgdGhlIGVmZmVjdGl2ZW5lc3MgYW5kIG9wdGltaXphdGlvbiBvZiBjbG91ZCBhZG9wdGlvbiBhbmQgcHJhY3RpY2VzLlwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IFwiQ3VycmVudCBDbG91ZCBNYXR1cml0eSBMZXZlbFwiLFxuICAgICAgICAgIGNvbnRlbnQ6IGBXaXRoIGFuIG92ZXJhbGwgc2NvcmUgb2YgJHtvdmVyYWxsU2NvcmUudG9GaXhlZChcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApfS81LjAsIHlvdXIgb3JnYW5pemF0aW9uIGlzIGF0ICR7ZGV0ZXJtaW5lT3ZlcmFsbE1hdHVyaXR5TGV2ZWwoXG4gICAgICAgICAgICBvdmVyYWxsU2NvcmVcbiAgICAgICAgICApfS4gJHtpbnRlcnByZXRNYXR1cml0eUxldmVsKG92ZXJhbGxTY29yZSl9YCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBcIkRpbWVuc2lvbmFsIEFuYWx5c2lzXCIsXG4gICAgICAgICAgY29udGVudDpcbiAgICAgICAgICAgIFwiVGhpcyByYWRhciBjaGFydCBoaWdobGlnaHRzIHN0cmVuZ3RocyBhbmQgaW1wcm92ZW1lbnQgYXJlYXMgYWNyb3NzIGNsb3VkIGRvbWFpbnMuXCIsXG4gICAgICAgICAgZGltZW5zaW9uYWxTY29yZXM6IGRpbWVuc2lvbmFsU2NvcmVzLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IFwiR3Jvd3RoIFRyYWplY3RvcnkgJiBSZWNvbW1lbmRhdGlvbnNcIixcbiAgICAgICAgICBjb250ZW50OiBcIkZvY3VzIGFyZWFzIGFuZCBnb2FscyB0byBhY2NlbGVyYXRlIGNsb3VkIG1hdHVyaXR5LlwiLFxuICAgICAgICAgIHNob3J0VGVybUZvY3VzOiBzaG9ydFRlcm1Gb2N1cyxcbiAgICAgICAgICBsb25nVGVybU9iamVjdGl2ZXM6IGxvbmdUZXJtT2JqZWN0aXZlcyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBwcmFjdGljZUFyZWFzOiBwcmFjdGljZUFyZWFzLFxuICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgIFwiVGhpcyBtYXR1cml0eSBhc3Nlc3NtZW50IHNob3dzIHlvdXIgY3VycmVudCBwb3NpdGlvbiBhbmQgdGFyZ2V0IHN0YXRlIGFjcm9zcyBrZXkgRGV2T3BzIGFuZCBjbG91ZCBwcmFjdGljZXMuXCIsXG4gICAgfSxcbiAgICByZWNvbW1lbmRhdGlvbnM6IHtcbiAgICAgIHNlY3Rpb25UaXRsZTogXCJSZWNvbW1lbmRhdGlvbnMgJiBBY3Rpb24gUGxhblwiLFxuICAgICAga2V5UmVjb21tZW5kYXRpb25zOiByZWNvbW1lbmRhdGlvbnMsXG4gICAgICBpbXBsZW1lbnRhdGlvblJvYWRtYXA6IFtcbiAgICAgICAge1xuICAgICAgICAgIHBoYXNlOiBcIkltbWVkaWF0ZSAoMC0zMCBkYXlzKVwiLFxuICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIFwiSW1wbGVtZW50IGF1dG9tYXRlZCBpbnN0YW5jZSBzY2hlZHVsaW5nXCIsXG4gICAgICAgICAgICBcIlN0YW5kYXJkaXplIHJlc291cmNlIHRhZ2dpbmdcIixcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcGhhc2U6IFwiU2hvcnQtdGVybSAoMS0zIG1vbnRocylcIixcbiAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICBcIlJpZ2h0LXNpemUgb3ZlcnNpemVkIGluc3RhbmNlc1wiLFxuICAgICAgICAgICAgXCJJbXBsZW1lbnQgUzMgbGlmZWN5Y2xlIHBvbGljaWVzXCIsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBoYXNlOiBcIk1lZGl1bS10ZXJtICgzLTYgbW9udGhzKVwiLFxuICAgICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIFwiRXhwYW5kIEluZnJhc3RydWN0dXJlIGFzIENvZGUgKElhQykgcHJhY3RpY2VzXCIsXG4gICAgICAgICAgICBcIkludHJvZHVjZSBjb3N0IGFub21hbHkgZGV0ZWN0aW9uXCIsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHBoYXNlOiBcIkxvbmctdGVybSAoNi0xMiBtb250aHMpXCIsXG4gICAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgXCJBZG9wdCBGaW5PcHMgYmVzdCBwcmFjdGljZXNcIixcbiAgICAgICAgICAgIFwiRW5oYW5jZSBjb250YWluZXIgb3JjaGVzdHJhdGlvbiBzdHJhdGVnaWVzXCIsXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBuZXh0U3RlcHM6IFtcbiAgICAgICAgXCJTY2hlZHVsZSBhIHBsYW5uaW5nIHNlc3Npb24gd2l0aCBNYWtlU3R1ZmZHbyB0ZWFtXCIsXG4gICAgICAgIFwiQXNzaWduIGludGVybmFsIHN0YWtlaG9sZGVycyB0byBlYWNoIHJlY29tbWVuZGF0aW9uIGFyZWFcIixcbiAgICAgICAgXCJUcmFjayBwcm9ncmVzcyB3aXRoIGJpLXdlZWtseSByZXZpZXdzXCIsXG4gICAgICBdLFxuICAgIH0sXG4gIH1cbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHByYWN0aWNlIGxldmVsIGJhc2VkIG9uIGNhdGVnb3J5IHNjb3JlXG4gKiBAcGFyYW0ge29iamVjdH0gY2F0ZWdvcnlTY29yZXMgLSBTY29yZXMgYnkgY2F0ZWdvcnlcbiAqIEBwYXJhbSB7c3RyaW5nfSBjYXRlZ29yeSAtIENhdGVnb3J5IG5hbWVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gUHJhY3RpY2UgbGV2ZWxcbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lUHJhY3RpY2VMZXZlbChjYXRlZ29yeVNjb3JlcywgY2F0ZWdvcnkpIHtcbiAgY29uc3Qgc2NvcmUgPSBjYXRlZ29yeVNjb3Jlc1tjYXRlZ29yeV0/LnNjb3JlIHx8IDNcblxuICBpZiAoc2NvcmUgPCAyKSByZXR1cm4gLTEgLy8gTGV2ZWwgLTE6IFJlZ3Jlc3NpdmVcbiAgaWYgKHNjb3JlIDwgMykgcmV0dXJuIDAgLy8gTGV2ZWwgMDogUmVwZWF0YWJsZVxuICBpZiAoc2NvcmUgPCA0KSByZXR1cm4gMSAvLyBMZXZlbCAxOiBDb25zaXN0ZW50XG4gIGlmIChzY29yZSA8IDQuNikgcmV0dXJuIDIgLy8gTGV2ZWwgMjogUXVhbnRpdGF0aXZlbHkgbWFuYWdlZFxuICByZXR1cm4gMyAvLyBMZXZlbCAzOiBPcHRpbWl6aW5nXG59XG5cbi8qKlxuICogSW50ZXJwcmV0IG1hdHVyaXR5IGxldmVsIGRlc2NyaXB0aW9uXG4gKiBAcGFyYW0ge251bWJlcn0gc2NvcmUgLSBNYXR1cml0eSBzY29yZVxuICogQHJldHVybnMge3N0cmluZ30gLSBJbnRlcnByZXRhdGlvblxuICovXG5mdW5jdGlvbiBpbnRlcnByZXRNYXR1cml0eUxldmVsKHNjb3JlKSB7XG4gIGlmIChzY29yZSA8IDIpXG4gICAgcmV0dXJuIFwic2lnbmlmaWNhbnQgcm9vbSBmb3IgaW1wcm92ZW1lbnQgaW4geW91ciBjbG91ZCBwcmFjdGljZXNcIlxuICBpZiAoc2NvcmUgPCAzKVxuICAgIHJldHVybiBcImVzdGFibGlzaGVkIGNsb3VkIHByYWN0aWNlcyB3aXRoIG9wcG9ydHVuaXRpZXMgZm9yIGF1dG9tYXRpb24gYW5kIHN0YW5kYXJkaXphdGlvblwiXG4gIGlmIChzY29yZSA8IDQpXG4gICAgcmV0dXJuIFwiZ29vZCBjbG91ZCBwcmFjdGljZXMgd2l0aCBvcHBvcnR1bml0aWVzIGZvciBvcHRpbWl6YXRpb24gYW5kIG1lYXN1cmVtZW50XCJcbiAgcmV0dXJuIFwiYWR2YW5jZWQgY2xvdWQgcHJhY3RpY2VzIHdpdGggb3Bwb3J0dW5pdGllcyBmb3IgY29udGludW91cyBpbXByb3ZlbWVudFwiXG59XG5cbi8qKlxuICogR2VuZXJhdGUgc2hvcnQtdGVybSBmb2N1cyBhcmVhcyBiYXNlZCBvbiBsb3dlc3Qgc2NvcmVzXG4gKiBAcGFyYW0ge29iamVjdH0gY2F0ZWdvcnlTY29yZXMgLSBTY29yZXMgYnkgY2F0ZWdvcnlcbiAqIEByZXR1cm5zIHthcnJheX0gLSBTaG9ydC10ZXJtIGZvY3VzIGFyZWFzXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlU2hvcnRUZXJtRm9jdXMoY2F0ZWdvcnlTY29yZXMpIHtcbiAgY29uc3QgZm9jdXNBcmVhcyA9IFtdXG4gIGNvbnN0IHNvcnRlZENhdGVnb3JpZXMgPSBPYmplY3QuZW50cmllcyhjYXRlZ29yeVNjb3JlcylcbiAgICAuc29ydCgoYSwgYikgPT4gYVsxXS5zY29yZSAtIGJbMV0uc2NvcmUpXG4gICAgLnNsaWNlKDAsIDMpXG5cbiAgc29ydGVkQ2F0ZWdvcmllcy5mb3JFYWNoKChbY2F0ZWdvcnksIGRhdGFdKSA9PiB7XG4gICAgaWYgKGNhdGVnb3J5ID09PSBcIkNsb3VkIFN0cmF0ZWd5XCIpIHtcbiAgICAgIGZvY3VzQXJlYXMucHVzaChcIkRldmVsb3AgY29tcHJlaGVuc2l2ZSBjbG91ZCBnb3Zlcm5hbmNlIGZyYW1ld29ya1wiKVxuICAgIH0gZWxzZSBpZiAoY2F0ZWdvcnkgPT09IFwiQ2xvdWQgQ29zdFwiKSB7XG4gICAgICBmb2N1c0FyZWFzLnB1c2goXCJJbXBsZW1lbnQgYXV0b21hdGVkIGNvc3QgbW9uaXRvcmluZyBhbmQgcmVwb3J0aW5nXCIpXG4gICAgfSBlbHNlIGlmIChjYXRlZ29yeSA9PT0gXCJDbG91ZCBTZWN1cml0eVwiKSB7XG4gICAgICBmb2N1c0FyZWFzLnB1c2goXCJFbmhhbmNlIHNlY3VyaXR5IGNvbnRyb2xzIGFuZCBjb21wbGlhbmNlIG1vbml0b3JpbmdcIilcbiAgICB9IGVsc2UgaWYgKGNhdGVnb3J5ID09PSBcIkNsb3VkIERldk9wc1wiKSB7XG4gICAgICBmb2N1c0FyZWFzLnB1c2goXCJBdXRvbWF0ZSBkZXBsb3ltZW50IGFuZCB0ZXN0aW5nIHByb2Nlc3Nlc1wiKVxuICAgIH0gZWxzZSBpZiAoY2F0ZWdvcnkgPT09IFwiQ2xvdWQgUGVvcGxlXCIpIHtcbiAgICAgIGZvY3VzQXJlYXMucHVzaChcIkltcGxlbWVudCBjbG91ZCBza2lsbHMgZGV2ZWxvcG1lbnQgcHJvZ3JhbVwiKVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gZm9jdXNBcmVhc1xufVxuXG4vKipcbiAqIEdlbmVyYXRlIGxvbmctdGVybSBvYmplY3RpdmVzXG4gKiBAcGFyYW0ge29iamVjdH0gY2F0ZWdvcnlTY29yZXMgLSBTY29yZXMgYnkgY2F0ZWdvcnlcbiAqIEByZXR1cm5zIHthcnJheX0gLSBMb25nLXRlcm0gb2JqZWN0aXZlc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUxvbmdUZXJtT2JqZWN0aXZlcyhjYXRlZ29yeVNjb3Jlcykge1xuICByZXR1cm4gW1xuICAgIFwiRXN0YWJsaXNoIGEgbWF0dXJlIEZpbk9wcyBwcmFjdGljZSB3aXRoIHByb2FjdGl2ZSBvcHRpbWl6YXRpb25cIixcbiAgICBcIkFjaGlldmUgOTAlKyBpbmZyYXN0cnVjdHVyZS1hcy1jb2RlIGNvdmVyYWdlXCIsXG4gICAgXCJJbXBsZW1lbnQgYWR2YW5jZWQgbXVsdGktY2xvdWQgc3RyYXRlZ3kgd2l0aCBhdXRvbWF0ZWQgd29ya2xvYWQgYmFsYW5jaW5nXCIsXG4gICAgXCJEZXZlbG9wIEFJLWRyaXZlbiBjbG91ZCBvcHRpbWl6YXRpb24gY2FwYWJpbGl0aWVzXCIsXG4gIF1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBzdW1tYXJ5IGZpbmRpbmdzIGJhc2VkIG9uIHNjb3Jlc1xuICogQHBhcmFtIHtvYmplY3R9IGNhdGVnb3J5U2NvcmVzIC0gU2NvcmVzIGJ5IGNhdGVnb3J5XG4gKiBAcmV0dXJucyB7YXJyYXl9IC0gU3VtbWFyeSBmaW5kaW5nc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVN1bW1hcnlGaW5kaW5ncyhjYXRlZ29yeVNjb3Jlcykge1xuICBjb25zdCBmaW5kaW5ncyA9IFtdXG5cbiAgaWYgKChjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIENvc3RcIl0/LnNjb3JlIHx8IDApIDwgMy41KSB7XG4gICAgZmluZGluZ3MucHVzaChcbiAgICAgIFwiQ2xvdWQgY29zdCBtYW5hZ2VtZW50IHByYWN0aWNlcyBuZWVkIGltcHJvdmVtZW50IHdpdGggcG90ZW50aWFsIGZvciAyNS0zNSUgY29zdCByZWR1Y3Rpb25cIlxuICAgIClcbiAgfVxuXG4gIGlmICgoY2F0ZWdvcnlTY29yZXNbXCJDbG91ZCBEZXZPcHNcIl0/LnNjb3JlIHx8IDApIDwgMy41KSB7XG4gICAgZmluZGluZ3MucHVzaChcbiAgICAgIFwiRGV2T3BzIGF1dG9tYXRpb24gbWF0dXJpdHkgaXMgYmVsb3cgaW5kdXN0cnkgYXZlcmFnZSwgaW1wYWN0aW5nIGRlcGxveW1lbnQgZWZmaWNpZW5jeVwiXG4gICAgKVxuICB9XG5cbiAgaWYgKChjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIFNlY3VyaXR5XCJdPy5zY29yZSB8fCAwKSA8IDQpIHtcbiAgICBmaW5kaW5ncy5wdXNoKFxuICAgICAgXCJTZWN1cml0eSBjb250cm9scyByZXF1aXJlIGVuaGFuY2VtZW50IHRvIG1lZXQgaW5kdXN0cnkgYmVzdCBwcmFjdGljZXNcIlxuICAgIClcbiAgfVxuXG4gIGlmICgoY2F0ZWdvcnlTY29yZXNbXCJDbG91ZCBTdHJhdGVneVwiXT8uc2NvcmUgfHwgMCkgPCAzLjUpIHtcbiAgICBmaW5kaW5ncy5wdXNoKFxuICAgICAgXCJDbG91ZCBnb3Zlcm5hbmNlIGZyYW1ld29yayBuZWVkcyBzdGFuZGFyZGl6YXRpb24gYWNyb3NzIHRoZSBvcmdhbml6YXRpb25cIlxuICAgIClcbiAgfVxuXG4gIC8vIEFkZCBhdCBsZWFzdCBvbmUgcG9zaXRpdmUgZmluZGluZ1xuICBjb25zdCBiZXN0Q2F0ZWdvcnkgPSBPYmplY3QuZW50cmllcyhjYXRlZ29yeVNjb3Jlcykuc29ydChcbiAgICAoYSwgYikgPT4gYlsxXS5zY29yZSAtIGFbMV0uc2NvcmVcbiAgKVswXVxuXG4gIGlmIChiZXN0Q2F0ZWdvcnkgJiYgYmVzdENhdGVnb3J5WzFdLnNjb3JlID49IDMuNSkge1xuICAgIGZpbmRpbmdzLnB1c2goXG4gICAgICBgU3Ryb25nIHBlcmZvcm1hbmNlIGluICR7XG4gICAgICAgIGJlc3RDYXRlZ29yeVswXVxuICAgICAgfSB3aXRoIGEgc2NvcmUgb2YgJHtiZXN0Q2F0ZWdvcnlbMV0uc2NvcmUudG9GaXhlZCgxKX0vNS4wYFxuICAgIClcbiAgfSBlbHNlIHtcbiAgICBmaW5kaW5ncy5wdXNoKFxuICAgICAgXCJNdWx0aXBsZSBvcHBvcnR1bml0aWVzIGlkZW50aWZpZWQgdG8gZW5oYW5jZSBjbG91ZCBtYXR1cml0eSBhY3Jvc3MgYWxsIGRpbWVuc2lvbnNcIlxuICAgIClcbiAgfVxuXG4gIHJldHVybiBmaW5kaW5nc1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBwb3RlbnRpYWwgc2F2aW5ncyBwZXJjZW50YWdlIGJhc2VkIG9uIGNhdGVnb3J5IHNjb3Jlc1xuICogQHBhcmFtIHtvYmplY3R9IGNhdGVnb3J5U2NvcmVzIC0gU2NvcmVzIGJ5IGNhdGVnb3J5XG4gKiBAcmV0dXJucyB7bnVtYmVyfSAtIFNhdmluZ3MgcGVyY2VudGFnZVxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVQb3RlbnRpYWxTYXZpbmdzKGNhdGVnb3J5U2NvcmVzKSB7XG4gIC8vIExvd2VyIHNjb3JlcyBpbiBDb3N0IGFuZCBTdHJhdGVneSBjYXRlZ29yaWVzIGluZGljYXRlIGhpZ2hlciBzYXZpbmdzIHBvdGVudGlhbFxuICBjb25zdCBjb3N0U2NvcmUgPSBjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIENvc3RcIl0/LnNjb3JlIHx8IDNcbiAgY29uc3Qgc3RyYXRlZ3lTY29yZSA9IGNhdGVnb3J5U2NvcmVzW1wiQ2xvdWQgU3RyYXRlZ3lcIl0/LnNjb3JlIHx8IDNcbiAgY29uc3QgZGV2b3BzU2NvcmUgPSBjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIERldk9wc1wiXT8uc2NvcmUgfHwgM1xuXG4gIC8vIENhbGN1bGF0ZSBiYXNlIHNhdmluZ3MgcG90ZW50aWFsXG4gIGxldCBzYXZpbmdzUG90ZW50aWFsID1cbiAgICAwLjQgLSBjb3N0U2NvcmUgLyAxMCAtIHN0cmF0ZWd5U2NvcmUgLyAxNSAtIGRldm9wc1Njb3JlIC8gMjBcblxuICAvLyBFbnN1cmUgc2F2aW5ncyBhcmUgaW4gYSByZWFzb25hYmxlIHJhbmdlXG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChzYXZpbmdzUG90ZW50aWFsLCAwLjEpLCAwLjQ1KVxufVxuXG4vKipcbiAqIEVzdGltYXRlIGFubnVhbCBjbG91ZCBzcGVuZCBiYXNlZCBvbiBjb21wYW55IHNpemUgYW5kIGluZHVzdHJ5XG4gKiBAcGFyYW0ge3N0cmluZ30gc2l6ZSAtIENvbXBhbnkgc2l6ZVxuICogQHBhcmFtIHtzdHJpbmd9IGluZHVzdHJ5IC0gSW5kdXN0cnlcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gRXN0aW1hdGVkIGFubnVhbCBjbG91ZCBzcGVuZFxuICovXG5mdW5jdGlvbiBlc3RpbWF0ZUFubnVhbENsb3VkU3BlbmQoc2l6ZSwgaW5kdXN0cnkpIHtcbiAgLy8gRGVmYXVsdCBiYXNlIHNwZW5kXG4gIGxldCBiYXNlU3BlbmQgPSA1MDAwMDBcblxuICAvLyBBZGp1c3QgYmFzZWQgb24gY29tcGFueSBzaXplXG4gIGNvbnN0IHNpemVOdW0gPSBwYXJzZUludChzaXplKSB8fCA1MFxuICBpZiAoc2l6ZU51bSA8IDIwKSB7XG4gICAgYmFzZVNwZW5kID0gMTAwMDAwXG4gIH0gZWxzZSBpZiAoc2l6ZU51bSA8IDEwMCkge1xuICAgIGJhc2VTcGVuZCA9IDMwMDAwMFxuICB9IGVsc2UgaWYgKHNpemVOdW0gPCA1MDApIHtcbiAgICBiYXNlU3BlbmQgPSAxMDAwMDAwXG4gIH0gZWxzZSB7XG4gICAgYmFzZVNwZW5kID0gMzAwMDAwMFxuICB9XG5cbiAgLy8gSW5kdXN0cnkgbXVsdGlwbGllcnNcbiAgY29uc3QgaW5kdXN0cnlNdWx0aXBsaWVycyA9IHtcbiAgICBUZWNobm9sb2d5OiAxLjUsXG4gICAgRmluYW5jZTogMS4zLFxuICAgIEhlYWx0aGNhcmU6IDEuMSxcbiAgICBSZXRhaWw6IDAuOSxcbiAgICBFZHVjYXRpb246IDAuNyxcbiAgICBNYW51ZmFjdHVyaW5nOiAwLjgsXG4gIH1cblxuICBjb25zdCBtdWx0aXBsaWVyID0gaW5kdXN0cnlNdWx0aXBsaWVyc1tpbmR1c3RyeV0gfHwgMS4wXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoYmFzZVNwZW5kICogbXVsdGlwbGllcilcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBwcmlvcml0aXplZCByZWNvbW1lbmRhdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBjYXRlZ29yeVNjb3JlcyAtIFNjb3JlcyBieSBjYXRlZ29yeVxuICogQHBhcmFtIHtvYmplY3R9IG1hdHVyaXR5TGV2ZWxzIC0gTWF0dXJpdHkgbGV2ZWxzIGJ5IGNhdGVnb3J5XG4gKiBAcmV0dXJucyB7YXJyYXl9IC0gUmVjb21tZW5kYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlUmVjb21tZW5kYXRpb25zKGNhdGVnb3J5U2NvcmVzLCBtYXR1cml0eUxldmVscykge1xuICBjb25zdCByZWNvbW1lbmRhdGlvbnMgPSBbXVxuXG4gIC8vIENsb3VkIENvc3QgcmVjb21tZW5kYXRpb25zXG4gIGlmICgoY2F0ZWdvcnlTY29yZXNbXCJDbG91ZCBDb3N0XCJdPy5zY29yZSB8fCAwKSA8IDMuNSkge1xuICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgIHRpdGxlOiBcIkltcGxlbWVudCBBdXRvbWF0ZWQgSW5zdGFuY2UgU2NoZWR1bGluZ1wiLFxuICAgICAgcmF0aW9uYWxlOlxuICAgICAgICBcIk5vbi1wcm9kdWN0aW9uIHJlc291cmNlcyBhcmUgcnVubmluZyAyNC83LCByZXN1bHRpbmcgaW4gdW5uZWNlc3NhcnkgY29zdHMgZHVyaW5nIGluYWN0aXZlIGhvdXJzLlwiLFxuICAgICAgaW1wYWN0OiBcIjE1LTIwJSByZWR1Y3Rpb24gaW4gY29tcHV0ZSBjb3N0c1wiLFxuICAgICAgcHJpb3JpdHk6IFwiQ3JpdGljYWxcIixcbiAgICB9KVxuXG4gICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgdGl0bGU6IFwiUmlnaHQtc2l6ZSBPdmVyc2l6ZWQgSW5zdGFuY2VzXCIsXG4gICAgICByYXRpb25hbGU6XG4gICAgICAgIFwiQW5hbHlzaXMgc2hvd3MgMzUlIG9mIGNvbXB1dGUgaW5zdGFuY2VzIGFyZSBzaWduaWZpY2FudGx5IG92ZXItcHJvdmlzaW9uZWQuXCIsXG4gICAgICBpbXBhY3Q6IFwiMjAtMjUlIHJlZHVjdGlvbiBpbiBpbnN0YW5jZSBjb3N0c1wiLFxuICAgICAgcHJpb3JpdHk6XG4gICAgICAgIChjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIENvc3RcIl0/LnNjb3JlIHx8IDApIDwgMyA/IFwiQ3JpdGljYWxcIiA6IFwiSGlnaFwiLFxuICAgIH0pXG4gIH1cblxuICAvLyBDbG91ZCBTdHJhdGVneSByZWNvbW1lbmRhdGlvbnNcbiAgaWYgKChjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIFN0cmF0ZWd5XCJdPy5zY29yZSB8fCAwKSA8IDQpIHtcbiAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICB0aXRsZTogXCJTdGFuZGFyZGl6ZSBSZXNvdXJjZSBUYWdnaW5nXCIsXG4gICAgICByYXRpb25hbGU6XG4gICAgICAgIFwiSW5jb25zaXN0ZW50IHRhZ2dpbmcgcHJldmVudHMgYWNjdXJhdGUgY29zdCBhbGxvY2F0aW9uIGFuZCBnb3Zlcm5hbmNlLlwiLFxuICAgICAgaW1wYWN0OiBcIkltcHJvdmVkIGNvc3QgdmlzaWJpbGl0eSBhbmQgZ292ZXJuYW5jZVwiLFxuICAgICAgcHJpb3JpdHk6XG4gICAgICAgIChjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIFN0cmF0ZWd5XCJdPy5zY29yZSB8fCAwKSA8IDNcbiAgICAgICAgICA/IFwiQ3JpdGljYWxcIlxuICAgICAgICAgIDogXCJIaWdoXCIsXG4gICAgfSlcblxuICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgIHRpdGxlOiBcIkltcGxlbWVudCBDb3N0IEFub21hbHkgRGV0ZWN0aW9uXCIsXG4gICAgICByYXRpb25hbGU6IFwiVW5leHBlY3RlZCBjb3N0IHNwaWtlcyBhcmUgbm90IGJlaW5nIGRldGVjdGVkIHByb21wdGx5LlwiLFxuICAgICAgaW1wYWN0OiBcIkVhcmx5IGRldGVjdGlvbiBvZiBjb3N0IGlzc3Vlc1wiLFxuICAgICAgcHJpb3JpdHk6IFwiTWVkaXVtXCIsXG4gICAgfSlcbiAgfVxuXG4gIC8vIENsb3VkIERldk9wcyByZWNvbW1lbmRhdGlvbnNcbiAgaWYgKChjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIERldk9wc1wiXT8uc2NvcmUgfHwgMCkgPCA0KSB7XG4gICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgdGl0bGU6IFwiRXhwYW5kIEluZnJhc3RydWN0dXJlIGFzIENvZGUgQ292ZXJhZ2VcIixcbiAgICAgIHJhdGlvbmFsZTpcbiAgICAgICAgXCJPbmx5IDQwJSBvZiBpbmZyYXN0cnVjdHVyZSBpcyBjdXJyZW50bHkgbWFuYWdlZCBhcyBjb2RlLCBsZWFkaW5nIHRvIGNvbmZpZ3VyYXRpb24gZHJpZnQuXCIsXG4gICAgICBpbXBhY3Q6IFwiUmVkdWNlZCBwcm92aXNpb25pbmcgdGltZSBhbmQgY29uZmlndXJhdGlvbiBlcnJvcnNcIixcbiAgICAgIHByaW9yaXR5OlxuICAgICAgICAoY2F0ZWdvcnlTY29yZXNbXCJDbG91ZCBEZXZPcHNcIl0/LnNjb3JlIHx8IDApIDwgMyA/IFwiQ3JpdGljYWxcIiA6IFwiSGlnaFwiLFxuICAgIH0pXG4gIH1cblxuICAvLyBDbG91ZCBTZWN1cml0eSByZWNvbW1lbmRhdGlvbnNcbiAgaWYgKChjYXRlZ29yeVNjb3Jlc1tcIkNsb3VkIFNlY3VyaXR5XCJdPy5zY29yZSB8fCAwKSA8IDQpIHtcbiAgICByZWNvbW1lbmRhdGlvbnMucHVzaCh7XG4gICAgICB0aXRsZTogXCJFbmhhbmNlIElBTSBDb250cm9scyBhbmQgTW9uaXRvcmluZ1wiLFxuICAgICAgcmF0aW9uYWxlOlxuICAgICAgICBcIkN1cnJlbnQgaWRlbnRpdHkgbWFuYWdlbWVudCBwcmFjdGljZXMgZG9uJ3QgZm9sbG93IHByaW5jaXBsZSBvZiBsZWFzdCBwcml2aWxlZ2UuXCIsXG4gICAgICBpbXBhY3Q6IFwiUmVkdWNlZCBzZWN1cml0eSByaXNrIGV4cG9zdXJlXCIsXG4gICAgICBwcmlvcml0eTpcbiAgICAgICAgKGNhdGVnb3J5U2NvcmVzW1wiQ2xvdWQgU2VjdXJpdHlcIl0/LnNjb3JlIHx8IDApIDwgM1xuICAgICAgICAgID8gXCJDcml0aWNhbFwiXG4gICAgICAgICAgOiBcIk1lZGl1bVwiLFxuICAgIH0pXG4gIH1cblxuICAvLyBBZGQgc3RvcmFnZSByZWNvbW1lbmRhdGlvbnNcbiAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgIHRpdGxlOiBcIkltcGxlbWVudCBTMyBMaWZlY3ljbGUgUG9saWNpZXNcIixcbiAgICByYXRpb25hbGU6XG4gICAgICBcIkxhcmdlIHZvbHVtZXMgb2YgaW5mcmVxdWVudGx5IGFjY2Vzc2VkIGRhdGEgYXJlIHN0b3JlZCBvbiBwcmVtaXVtIHN0b3JhZ2UgdGllcnMuXCIsXG4gICAgaW1wYWN0OiBcIjI1LTMwJSByZWR1Y3Rpb24gaW4gc3RvcmFnZSBjb3N0c1wiLFxuICAgIHByaW9yaXR5OiBcIk1lZGl1bVwiLFxuICB9KVxuXG4gIHJldHVybiByZWNvbW1lbmRhdGlvbnNcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBwcm9jZXNzQXNzZXNzbWVudERhdGEsXG59XG4iXSwibmFtZXMiOlsicHJvY2Vzc0Fzc2Vzc21lbnREYXRhIiwicmVzcG9uc2VzIiwiaW5kdXN0cnlTdGFuZGFyZHMiLCJjYXRlZ29yeVNjb3JlcyIsImNsaWVudEluZm8iLCJuYW1lIiwiZmluZCIsInIiLCJRdWVzdGlvbklEIiwiUmVzcG9uc2VUZXh0IiwiYnVzaW5lc3MiLCJlbWFpbCIsInNpemUiLCJpbmR1c3RyeSIsInN0YW5kYXJkTWFwIiwiZm9yRWFjaCIsInN0YW5kYXJkIiwiU3RhbmRhcmRUZXh0IiwiY2F0ZWdvcnlNYXBwaW5nIiwiT2JqZWN0IiwiZW50cmllcyIsImNhdGVnb3J5IiwicXVlc3Rpb25JZHMiLCJzY29yZXMiLCJtYXAiLCJpZCIsInJlc3BvbnNlIiwiU2NvcmUiLCJmaWx0ZXIiLCJzY29yZSIsImxlbmd0aCIsInBhcnNlRmxvYXQiLCJyZWR1Y2UiLCJzdW0iLCJ0b0ZpeGVkIiwibWF0dXJpdHlMZXZlbHMiLCJkZXRlcm1pbmVTdHJhdGVneU1hdHVyaXR5TGV2ZWwiLCJkZXRlcm1pbmVDb3N0TWF0dXJpdHlMZXZlbCIsImRldGVybWluZVNlY3VyaXR5TWF0dXJpdHlMZXZlbCIsImRldGVybWluZVBlb3BsZU1hdHVyaXR5TGV2ZWwiLCJkZXRlcm1pbmVEZXZPcHNNYXR1cml0eUxldmVsIiwib3ZlcmFsbFNjb3JlIiwidmFsdWVzIiwiY2F0IiwiZm9ybWF0UmVwb3J0RGF0YSIsIk1BVFVSSVRZX0xFVkVMUyIsImxldmVsIiwidGhyZXNob2xkIiwiZGVzY3JpcHRpb24iLCJkZXRlcm1pbmVPdmVyYWxsTWF0dXJpdHlMZXZlbCIsImRpbWVuc2lvbmFsU2NvcmVzIiwiZGltZW5zaW9uIiwiZGF0YSIsImZ1bGxNYXJrIiwicHJhY3RpY2VBcmVhcyIsImN1cnJlbnRMZXZlbCIsImRldGVybWluZVByYWN0aWNlTGV2ZWwiLCJ0YXJnZXRMZXZlbCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJyZWNvbW1lbmRhdGlvbnMiLCJnZW5lcmF0ZVJlY29tbWVuZGF0aW9ucyIsInNob3J0VGVybUZvY3VzIiwiZ2VuZXJhdGVTaG9ydFRlcm1Gb2N1cyIsImxvbmdUZXJtT2JqZWN0aXZlcyIsImdlbmVyYXRlTG9uZ1Rlcm1PYmplY3RpdmVzIiwic3VtbWFyeUZpbmRpbmdzIiwiZ2VuZXJhdGVTdW1tYXJ5RmluZGluZ3MiLCJyZXBvcnRNZXRhZGF0YSIsIm9yZ2FuaXphdGlvbk5hbWUiLCJjbGllbnROYW1lIiwiY2xpZW50RW1haWwiLCJjbGllbnRTaXplIiwiY2xpZW50SW5kdXN0cnkiLCJyZXBvcnREYXRlIiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInllYXIiLCJtb250aCIsImRheSIsInJlcG9ydFBlcmlvZCIsImNlaWwiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwiZXhlY3V0aXZlU3VtbWFyeSIsInNlY3Rpb25UaXRsZSIsInN1YnRvcGljcyIsInRpdGxlIiwiY29udGVudCIsInNsaWNlIiwicmVjIiwiY2xvdWRNYXR1cml0eUFzc2Vzc21lbnQiLCJpbnRlcnByZXRNYXR1cml0eUxldmVsIiwia2V5UmVjb21tZW5kYXRpb25zIiwiaW1wbGVtZW50YXRpb25Sb2FkbWFwIiwicGhhc2UiLCJhY3Rpb25zIiwibmV4dFN0ZXBzIiwiZm9jdXNBcmVhcyIsInNvcnRlZENhdGVnb3JpZXMiLCJzb3J0IiwiYSIsImIiLCJwdXNoIiwiZmluZGluZ3MiLCJiZXN0Q2F0ZWdvcnkiLCJjYWxjdWxhdGVQb3RlbnRpYWxTYXZpbmdzIiwiY29zdFNjb3JlIiwic3RyYXRlZ3lTY29yZSIsImRldm9wc1Njb3JlIiwic2F2aW5nc1BvdGVudGlhbCIsImVzdGltYXRlQW5udWFsQ2xvdWRTcGVuZCIsImJhc2VTcGVuZCIsInNpemVOdW0iLCJwYXJzZUludCIsImluZHVzdHJ5TXVsdGlwbGllcnMiLCJUZWNobm9sb2d5IiwiRmluYW5jZSIsIkhlYWx0aGNhcmUiLCJSZXRhaWwiLCJFZHVjYXRpb24iLCJNYW51ZmFjdHVyaW5nIiwibXVsdGlwbGllciIsInJvdW5kIiwicmF0aW9uYWxlIiwiaW1wYWN0IiwicHJpb3JpdHkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/assessmentUtils.js\n"));

/***/ })

});