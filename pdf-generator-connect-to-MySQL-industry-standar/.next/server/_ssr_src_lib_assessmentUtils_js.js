"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_assessmentUtils_js";
exports.ids = ["_ssr_src_lib_assessmentUtils_js"];
exports.modules = {

/***/ "(ssr)/./src/lib/assessmentUtils.js":
/*!************************************!*\
  !*** ./src/lib/assessmentUtils.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   processAssessmentData: () => (/* binding */ processAssessmentData)\n/* harmony export */ });\n// src/lib/assessmentUtils.js\n/**\n * Processes database responses into maturity assessment data\n * @param {Array} responses - Array of response objects from the database\n * @param {Array} industryStandards - Array of industry standard objects\n * @returns {Object} Processed assessment data\n */ function processAssessmentData(responses, industryStandards) {\n    // Extract client information\n    const clientInfo = {\n        name: responses.find((r)=>r.QuestionID === 1)?.ResponseText || \"Unknown\",\n        business: responses.find((r)=>r.QuestionID === 2)?.ResponseText || \"Unknown\",\n        email: responses.find((r)=>r.QuestionID === 3)?.ResponseText || \"Unknown\",\n        size: responses.find((r)=>r.QuestionID === 4)?.ResponseText || \"Unknown\",\n        industry: responses.find((r)=>r.QuestionID === 5)?.ResponseText || \"Unknown\"\n    };\n    // Create a map of Industry Standards for fast lookup\n    const standardMap = {};\n    const questionMap = {};\n    industryStandards.forEach((standard)=>{\n        if (standard.QuestionID != null && standard.Score != null) {\n            const key = `${standard.QuestionID}_${standard.Score}`;\n            standardMap[key] = standard.StandardText;\n            questionMap[standard.QuestionID] = standard.QuestionText;\n        }\n    });\n    // Enrich responses with Standard Text and Question Text\n    const enrichedResponses = responses.map((r)=>{\n        const key = `${r.QuestionID}_${r.Score}`;\n        return {\n            ...r,\n            StandardText: standardMap[key] || \"No standard available\",\n            QuestionText: questionMap[r.QuestionID] || `Question ${r.QuestionID}`\n        };\n    });\n    // Group questions by category\n    const categoryMapping = {\n        \"Cloud Strategy\": [\n            6,\n            7,\n            8\n        ],\n        \"Cloud Cost\": [\n            9,\n            10,\n            11\n        ],\n        \"Cloud Security\": [\n            12,\n            13\n        ],\n        \"Cloud People\": [\n            14,\n            19,\n            20\n        ],\n        \"Cloud DevOps\": [\n            15,\n            16,\n            17,\n            18\n        ]\n    };\n    // Calculate scores for each category\n    const categoryScores = {};\n    Object.entries(categoryMapping).forEach(([category, questionIds])=>{\n        const scores = questionIds.map((id)=>{\n            const response = responses.find((r)=>r.QuestionID === id);\n            return response?.Score || 0;\n        }).filter((score)=>score > 0);\n        // Calculate average score if we have valid scores\n        if (scores.length > 0) {\n            categoryScores[category] = {\n                score: parseFloat((scores.reduce((sum, score)=>sum + score, 0) / scores.length).toFixed(1)),\n                responses: scores\n            };\n        }\n    });\n    // Determine maturity levels based on scores\n    const maturityLevels = {\n        \"Cloud Strategy\": determineStrategyMaturityLevel(categoryScores[\"Cloud Strategy\"]?.score),\n        \"Cloud Cost\": determineCostMaturityLevel(categoryScores[\"Cloud Cost\"]?.score),\n        \"Cloud Security\": determineSecurityMaturityLevel(categoryScores[\"Cloud Security\"]?.score),\n        \"Cloud People\": determinePeopleMaturityLevel(categoryScores[\"Cloud People\"]?.score),\n        \"Cloud DevOps\": determineDevOpsMaturityLevel(categoryScores[\"Cloud DevOps\"]?.score)\n    };\n    // Calculate overall score\n    const overallScore = parseFloat((Object.values(categoryScores).reduce((sum, cat)=>sum + cat.score, 0) / Object.values(categoryScores).length).toFixed(1));\n    // Format data for the report components\n    return formatReportData(clientInfo, categoryScores, maturityLevels, overallScore, enrichedResponses);\n}\n// Maturity levels data for reference\nconst MATURITY_LEVELS = [\n    {\n        level: -1,\n        threshold: 0,\n        name: \"Level -1: Regressive\",\n        description: \"Process unrepeatable, poorly controlled and reactive\"\n    },\n    {\n        level: 0,\n        threshold: 2,\n        name: \"Level 0: Repeatable\",\n        description: \"Process documented and partly automated\"\n    },\n    {\n        level: 1,\n        threshold: 3,\n        name: \"Level 1: Consistent\",\n        description: \"Automated processes applied across whole application lifecycle\"\n    },\n    {\n        level: 2,\n        threshold: 4,\n        name: \"Level 2: Quantitatively managed\",\n        description: \"Process measured and controlled\"\n    },\n    {\n        level: 3,\n        threshold: 4.5,\n        name: \"Level 3: Optimizing\",\n        description: \"Focus on process improvements\"\n    }\n];\n/**\n * Determines maturity level for Cloud Strategy\n * @param {number} score - Average score for Cloud Strategy\n * @returns {object} - Maturity level information\n */ function determineStrategyMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Ad hoc cloud usage without a defined strategy\"\n    };\n    if (score < 2) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Ad hoc cloud usage without a defined strategy\"\n    };\n    if (score < 3) return {\n        level: 2,\n        name: \"Level 2: Repeatable\",\n        description: \"Basic cloud strategy aligned with some business objectives\"\n    };\n    if (score < 4) return {\n        level: 3,\n        name: \"Level 3: Defined\",\n        description: \"Formalized cloud strategy integrated with business planning\"\n    };\n    if (score < 4.6) return {\n        level: 4,\n        name: \"Level 4: Managed\",\n        description: \"Cloud strategy is regularly reviewed and optimized\"\n    };\n    return {\n        level: 5,\n        name: \"Level 5: Optimized\",\n        description: \"Continuous improvement with proactive alignment to evolving business goals\"\n    };\n}\n/**\n * Determines maturity level for Cloud Cost Management\n * @param {number} score - Average score for Cloud Cost\n * @returns {object} - Maturity level information\n */ function determineCostMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Crawl\",\n        description: \"Limited cost visibility and control\"\n    };\n    if (score < 2.5) return {\n        level: 1,\n        name: \"Crawl\",\n        description: \"Basic cost visibility with initial tagging and reporting\"\n    };\n    if (score < 4) return {\n        level: 2,\n        name: \"Walk\",\n        description: \"Improved cost allocation and budgeting processes\"\n    };\n    return {\n        level: 3,\n        name: \"Run\",\n        description: \"Advanced forecasting, real-time cost monitoring, and strategic business alignment\"\n    };\n}\n/**\n * Determines maturity level for Cloud Security\n * @param {number} score - Average score for Cloud Security\n * @returns {object} - Maturity level information\n */ function determineSecurityMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Basic security measures with limited automation\"\n    };\n    if (score < 2) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Basic security measures with limited automation\"\n    };\n    if (score < 3) return {\n        level: 2,\n        name: \"Level 2: Managed\",\n        description: \"Improved visibility and some automated security processes\"\n    };\n    if (score < 4) return {\n        level: 3,\n        name: \"Level 3: Defined\",\n        description: \"Comprehensive security policies and procedures in place\"\n    };\n    if (score < 4.6) return {\n        level: 4,\n        name: \"Level 4: Quantitatively Managed\",\n        description: \"Security performance is measured and managed\"\n    };\n    return {\n        level: 5,\n        name: \"Level 5: Optimized\",\n        description: \"Continuous improvement with adaptive security measures\"\n    };\n}\n/**\n * Determines maturity level for Cloud People\n * @param {number} score - Average score for Cloud People\n * @returns {object} - Maturity level information\n */ function determinePeopleMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Limited cloud expertise with ad hoc training\"\n    };\n    if (score < 2) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Limited cloud expertise with ad hoc training\"\n    };\n    if (score < 3) return {\n        level: 2,\n        name: \"Level 2: Repeatable\",\n        description: \"Basic training programs established\"\n    };\n    if (score < 4) return {\n        level: 3,\n        name: \"Level 3: Defined\",\n        description: \"Structured training and development plans in place\"\n    };\n    if (score < 4.6) return {\n        level: 4,\n        name: \"Level 4: Managed\",\n        description: \"Regular assessment and improvement of cloud skills\"\n    };\n    return {\n        level: 5,\n        name: \"Level 5: Optimized\",\n        description: \"Continuous learning culture with advanced skill development\"\n    };\n}\n/**\n * Determines maturity level for Cloud DevOps\n * @param {number} score - Average score for Cloud DevOps\n * @returns {object} - Maturity level information\n */ function determineDevOpsMaturityLevel(score) {\n    if (!score) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Manual processes with minimal collaboration\"\n    };\n    if (score < 2) return {\n        level: 1,\n        name: \"Level 1: Initial\",\n        description: \"Manual processes with minimal collaboration\"\n    };\n    if (score < 3) return {\n        level: 2,\n        name: \"Level 2: Managed\",\n        description: \"Basic automation and improved team collaboration\"\n    };\n    if (score < 4) return {\n        level: 3,\n        name: \"Level 3: Defined\",\n        description: \"Standardized processes with integrated tools\"\n    };\n    if (score < 4.6) return {\n        level: 4,\n        name: \"Level 4: Quantitatively Managed\",\n        description: \"Metrics-driven improvements and proactive incident management\"\n    };\n    return {\n        level: 5,\n        name: \"Level 5: Optimized\",\n        description: \"Fully automated pipelines with continuous delivery and feedback loops\"\n    };\n}\n/**\n * Determines overall maturity level\n * @param {number} score - Overall maturity score\n * @returns {string} - Overall maturity level name\n */ function determineOverallMaturityLevel(score) {\n    if (score < 2) return \"Level 1: Initial\";\n    if (score < 3) return \"Level 2: Repeatable\";\n    if (score < 4) return \"Level 3: Defined\";\n    if (score < 4.6) return \"Level 4: Managed\";\n    return \"Level 5: Optimized\";\n}\n/**\n * Formats assessment data for report components\n * @param {object} clientInfo - Client information\n * @param {object} categoryScores - Scores by category\n * @param {object} maturityLevels - Maturity levels by category\n * @param {number} overallScore - Overall maturity score\n * @param {array} enrichedResponses - Enriched responses with standards text\n * @returns {object} - Formatted report data\n */ function formatReportData(clientInfo, categoryScores, maturityLevels, overallScore, enrichedResponses) {\n    // Create radar chart data for maturity dimensions\n    const dimensionalScores = Object.entries(categoryScores).map(([dimension, data])=>({\n            dimension,\n            score: data.score,\n            fullMark: 5\n        }));\n    // Practice areas for maturity table\n    const practiceAreas = [\n        {\n            id: \"buildManagement\",\n            name: \"Build management and CI\",\n            currentLevel: determinePracticeLevel(categoryScores, \"Cloud DevOps\"),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1, 3)\n        },\n        {\n            id: \"environment\",\n            name: \"Environment and deployments\",\n            currentLevel: determinePracticeLevel(categoryScores, \"Cloud DevOps\"),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1, 3)\n        },\n        {\n            id: \"release\",\n            name: \"Release management\",\n            currentLevel: determinePracticeLevel(categoryScores, \"Cloud DevOps\"),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1, 3)\n        },\n        {\n            id: \"testing\",\n            name: \"Testing\",\n            currentLevel: Math.max(determinePracticeLevel(categoryScores, \"Cloud DevOps\") - 1, -1),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud DevOps\") + 1, 3)\n        },\n        {\n            id: \"dataManagement\",\n            name: \"Data Management\",\n            currentLevel: determinePracticeLevel(categoryScores, \"Cloud Strategy\"),\n            targetLevel: Math.min(determinePracticeLevel(categoryScores, \"Cloud Strategy\") + 1, 3)\n        }\n    ];\n    // Generate necessary sections\n    const recommendations = generateRecommendations(categoryScores, maturityLevels);\n    const shortTermFocus = generateShortTermFocus(categoryScores);\n    const longTermObjectives = generateLongTermObjectives(categoryScores);\n    const summaryFindings = generateSummaryFindings(categoryScores);\n    return {\n        reportMetadata: {\n            organizationName: clientInfo.business,\n            clientName: clientInfo.name,\n            clientEmail: clientInfo.email,\n            clientSize: clientInfo.size,\n            clientIndustry: clientInfo.industry,\n            reportDate: new Date().toLocaleDateString(\"en-US\", {\n                year: \"numeric\",\n                month: \"long\",\n                day: \"numeric\"\n            }),\n            reportPeriod: `Q${Math.ceil((new Date().getMonth() + 1) / 3)} ${new Date().getFullYear()}`\n        },\n        executiveSummary: {\n            sectionTitle: \"Executive Summary\",\n            subtopics: [\n                {\n                    title: \"Overview\",\n                    content: `This report presents an overview of ${clientInfo.business}'s cloud infrastructure maturity.`\n                },\n                {\n                    title: \"Purpose\",\n                    content: \"To assess and recommend improvements for cloud practices and maturity.\"\n                },\n                {\n                    title: \"Methodology\",\n                    content: \"Assessment responses analyzed against industry standards to identify gaps and opportunities.\"\n                },\n                {\n                    title: \"Key Focuses\",\n                    content: [\n                        \"Cloud cost optimization\",\n                        \"Infrastructure as Code (IaC) practices\",\n                        \"Automation and DevOps improvements\",\n                        \"Governance and operational excellence\"\n                    ]\n                },\n                {\n                    title: \"Summary of Findings\",\n                    content: summaryFindings\n                },\n                {\n                    title: \"Key Recommendations\",\n                    content: recommendations.slice(0, 4).map((rec)=>rec.title)\n                }\n            ]\n        },\n        cloudMaturityAssessment: {\n            sectionTitle: \"Cloud Maturity Assessment\",\n            overallScore: overallScore,\n            currentLevel: determineOverallMaturityLevel(overallScore),\n            maturityLevels: MATURITY_LEVELS,\n            dimensionalScores: dimensionalScores,\n            subtopics: [\n                {\n                    title: \"Understanding Cloud Maturity\",\n                    content: \"Cloud maturity measures the effectiveness and optimization of cloud adoption and practices.\"\n                },\n                {\n                    title: \"Current Cloud Maturity Level\",\n                    content: `With an overall score of ${overallScore.toFixed(1)}/5.0, your organization is at ${determineOverallMaturityLevel(overallScore)}. ${interpretMaturityLevel(overallScore)}`\n                },\n                {\n                    title: \"Dimensional Analysis\",\n                    content: \"This radar chart highlights strengths and improvement areas across cloud domains.\",\n                    dimensionalScores: dimensionalScores\n                },\n                {\n                    title: \"Growth Trajectory & Recommendations\",\n                    content: \"Focus areas and goals to accelerate cloud maturity.\",\n                    shortTermFocus: shortTermFocus,\n                    longTermObjectives: longTermObjectives\n                }\n            ],\n            practiceAreas: practiceAreas,\n            description: \"This maturity assessment shows your current position and target state across key DevOps and cloud practices.\"\n        },\n        recommendations: {\n            sectionTitle: \"Recommendations & Action Plan\",\n            keyRecommendations: recommendations,\n            implementationRoadmap: [\n                {\n                    phase: \"Immediate (0-30 days)\",\n                    actions: [\n                        \"Implement automated instance scheduling\",\n                        \"Standardize resource tagging\"\n                    ]\n                },\n                {\n                    phase: \"Short-term (1-3 months)\",\n                    actions: [\n                        \"Right-size oversized instances\",\n                        \"Implement S3 lifecycle policies\"\n                    ]\n                },\n                {\n                    phase: \"Medium-term (3-6 months)\",\n                    actions: [\n                        \"Expand Infrastructure as Code (IaC) practices\",\n                        \"Introduce cost anomaly detection\"\n                    ]\n                },\n                {\n                    phase: \"Long-term (6-12 months)\",\n                    actions: [\n                        \"Adopt FinOps best practices\",\n                        \"Enhance container orchestration strategies\"\n                    ]\n                }\n            ],\n            nextSteps: [\n                \"Schedule a planning session with MakeStuffGo team\",\n                \"Assign internal stakeholders to each recommendation area\",\n                \"Track progress with bi-weekly reviews\"\n            ],\n            categoryScores,\n            responses: enrichedResponses\n        }\n    };\n}\n/**\n * Helper function to determine practice level based on category score\n * @param {object} categoryScores - Scores by category\n * @param {string} category - Category name\n * @returns {number} - Practice level\n */ function determinePracticeLevel(categoryScores, category) {\n    const score = categoryScores[category]?.score || 3;\n    if (score < 2) return -1 // Level -1: Regressive\n    ;\n    if (score < 3) return 0 // Level 0: Repeatable\n    ;\n    if (score < 4) return 1 // Level 1: Consistent\n    ;\n    if (score < 4.6) return 2 // Level 2: Quantitatively managed\n    ;\n    return 3 // Level 3: Optimizing\n    ;\n}\n/**\n * Interpret maturity level description\n * @param {number} score - Maturity score\n * @returns {string} - Interpretation\n */ function interpretMaturityLevel(score) {\n    if (score < 2) return \"significant room for improvement in your cloud practices\";\n    if (score < 3) return \"established cloud practices with opportunities for automation and standardization\";\n    if (score < 4) return \"good cloud practices with opportunities for optimization and measurement\";\n    return \"advanced cloud practices with opportunities for continuous improvement\";\n}\n/**\n * Generate short-term focus areas based on lowest scores\n * @param {object} categoryScores - Scores by category\n * @returns {array} - Short-term focus areas\n */ function generateShortTermFocus(categoryScores) {\n    const focusAreas = [];\n    const sortedCategories = Object.entries(categoryScores).sort((a, b)=>a[1].score - b[1].score).slice(0, 3);\n    sortedCategories.forEach(([category, data])=>{\n        if (category === \"Cloud Strategy\") {\n            focusAreas.push(\"Develop comprehensive cloud governance framework\");\n        } else if (category === \"Cloud Cost\") {\n            focusAreas.push(\"Implement automated cost monitoring and reporting\");\n        } else if (category === \"Cloud Security\") {\n            focusAreas.push(\"Enhance security controls and compliance monitoring\");\n        } else if (category === \"Cloud DevOps\") {\n            focusAreas.push(\"Automate deployment and testing processes\");\n        } else if (category === \"Cloud People\") {\n            focusAreas.push(\"Implement cloud skills development program\");\n        }\n    });\n    return focusAreas;\n}\n/**\n * Generate long-term objectives\n * @param {object} categoryScores - Scores by category\n * @returns {array} - Long-term objectives\n */ function generateLongTermObjectives(categoryScores) {\n    return [\n        \"Establish a mature FinOps practice with proactive optimization\",\n        \"Achieve 90%+ infrastructure-as-code coverage\",\n        \"Implement advanced multi-cloud strategy with automated workload balancing\",\n        \"Develop AI-driven cloud optimization capabilities\"\n    ];\n}\n/**\n * Generate summary findings based on scores\n * @param {object} categoryScores - Scores by category\n * @returns {array} - Summary findings\n */ function generateSummaryFindings(categoryScores) {\n    const findings = [];\n    if ((categoryScores[\"Cloud Cost\"]?.score || 0) < 3.5) {\n        findings.push(\"Cloud cost management practices need improvement with potential for 25-35% cost reduction\");\n    }\n    if ((categoryScores[\"Cloud DevOps\"]?.score || 0) < 3.5) {\n        findings.push(\"DevOps automation maturity is below industry average, impacting deployment efficiency\");\n    }\n    if ((categoryScores[\"Cloud Security\"]?.score || 0) < 4) {\n        findings.push(\"Security controls require enhancement to meet industry best practices\");\n    }\n    if ((categoryScores[\"Cloud Strategy\"]?.score || 0) < 3.5) {\n        findings.push(\"Cloud governance framework needs standardization across the organization\");\n    }\n    // Add at least one positive finding\n    const bestCategory = Object.entries(categoryScores).sort((a, b)=>b[1].score - a[1].score)[0];\n    if (bestCategory && bestCategory[1].score >= 3.5) {\n        findings.push(`Strong performance in ${bestCategory[0]} with a score of ${bestCategory[1].score.toFixed(1)}/5.0`);\n    } else {\n        findings.push(\"Multiple opportunities identified to enhance cloud maturity across all dimensions\");\n    }\n    return findings;\n}\n/**\n * Generate prioritized recommendations\n * @param {object} categoryScores - Scores by category\n * @param {object} maturityLevels - Maturity levels by category\n * @returns {array} - Recommendations\n */ function generateRecommendations(categoryScores, maturityLevels) {\n    const recommendations = [];\n    // Cloud Cost recommendations\n    if ((categoryScores[\"Cloud Cost\"]?.score || 0) < 3.5) {\n        recommendations.push({\n            title: \"Implement Automated Instance Scheduling\",\n            rationale: \"Non-production resources are running 24/7, resulting in unnecessary costs during inactive hours.\",\n            impact: \"15-20% reduction in compute costs\",\n            priority: \"Critical\"\n        });\n        recommendations.push({\n            title: \"Right-size Oversized Instances\",\n            rationale: \"Analysis shows 35% of compute instances are significantly over-provisioned.\",\n            impact: \"20-25% reduction in instance costs\",\n            priority: (categoryScores[\"Cloud Cost\"]?.score || 0) < 3 ? \"Critical\" : \"High\"\n        });\n    }\n    // Cloud Strategy recommendations\n    if ((categoryScores[\"Cloud Strategy\"]?.score || 0) < 4) {\n        recommendations.push({\n            title: \"Standardize Resource Tagging\",\n            rationale: \"Inconsistent tagging prevents accurate cost allocation and governance.\",\n            impact: \"Improved cost visibility and governance\",\n            priority: (categoryScores[\"Cloud Strategy\"]?.score || 0) < 3 ? \"Critical\" : \"High\"\n        });\n        recommendations.push({\n            title: \"Implement Cost Anomaly Detection\",\n            rationale: \"Unexpected cost spikes are not being detected promptly.\",\n            impact: \"Early detection of cost issues\",\n            priority: \"Medium\"\n        });\n    }\n    // Cloud DevOps recommendations\n    if ((categoryScores[\"Cloud DevOps\"]?.score || 0) < 4) {\n        recommendations.push({\n            title: \"Expand Infrastructure as Code Coverage\",\n            rationale: \"Only 40% of infrastructure is currently managed as code, leading to configuration drift.\",\n            impact: \"Reduced provisioning time and configuration errors\",\n            priority: (categoryScores[\"Cloud DevOps\"]?.score || 0) < 3 ? \"Critical\" : \"High\"\n        });\n    }\n    // Cloud Security recommendations\n    if ((categoryScores[\"Cloud Security\"]?.score || 0) < 4) {\n        recommendations.push({\n            title: \"Enhance IAM Controls and Monitoring\",\n            rationale: \"Current identity management practices don't follow principle of least privilege.\",\n            impact: \"Reduced security risk exposure\",\n            priority: (categoryScores[\"Cloud Security\"]?.score || 0) < 3 ? \"Critical\" : \"Medium\"\n        });\n    }\n    // Add storage recommendations\n    recommendations.push({\n        title: \"Implement S3 Lifecycle Policies\",\n        rationale: \"Large volumes of infrequently accessed data are stored on premium storage tiers.\",\n        impact: \"25-30% reduction in storage costs\",\n        priority: \"Medium\"\n    });\n    return recommendations;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    processAssessmentData\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/assessmentUtils.js\n");

/***/ })

};
;